{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Robo Appian: A Python Library for Appian UI Test Automation","text":"<p>In response to the growing need for robust and streamlined testing of Appian applications, we are proud to introduce robo_appian, a powerful open-source Python library designed to simplify and accelerate the creation of automated test scripts for Appian user interfaces. This library provides a high-level API to interact with Appian's unique UI components, abstracting away the complexities of their underlying implementation and enabling developers and QA engineers to write more readable, maintainable, and resilient tests.</p> <p>robo_appian is built on top of the widely-used Selenium WebDriver framework, allowing for cross-browser testing and seamless integration into existing testing workflows. It addresses the common challenge of locating and interacting with Appian's dynamically generated UI elements by providing a set of intuitive functions and locator strategies tailored specifically for the Appian platform.</p>"},{"location":"#why-use-robo-appian","title":"Why use Robo Appian?","text":"<ul> <li> <p>Simplified Component Interaction: The library offers a suite of functions for easily finding and manipulating common Appian UI components such as text fields, buttons, dropdowns, grids, and more.</p> </li> <li> <p>Robust Locator Strategies: appian-automator employs intelligent locator strategies that go beyond simple ID or class name matching, making tests less brittle and more resistant to changes in the application's UI.</p> </li> <li> <p>Improved Readability and Maintainability: By providing a higher-level of abstraction, the library allows for the creation of test scripts that are more descriptive and easier to understand, reducing the maintenance overhead.</p> </li> <li> <p>Seamless Selenium Integration: Built as a layer on top of Selenium, appian-automator allows users to leverage the full power and flexibility of the Selenium framework when needed.</p> </li> <li> <p>Extensibility: The library is designed to be extensible, allowing users to add custom functions and locator strategies for unique or complex UI components.</p> </li> </ul>"},{"location":"#quick-start-example","title":"Quick Start Example","text":"<pre><code>from selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom robo_appian.components.InputUtils import InputUtils\nfrom robo_appian.components.ButtonUtils import ButtonUtils\n\ndriver = webdriver.Chrome()\nwait = WebDriverWait(driver, 10)\ndriver.get(\"https://your-appian-app.com\")\n\nInputUtils.setValueByLabelText(wait, \"Username\", \"test_user\")\nInputUtils.setValueByLabelText(wait, \"Password\", \"password123\")\nButtonUtils.clickByLabelText(wait, \"Sign In\")\ndriver.quit()\n</code></pre>"},{"location":"#what-can-you-automate","title":"What can you automate?","text":"<ul> <li>Text fields, dropdowns, buttons, dates, tables, tabs, and more</li> </ul>"},{"location":"#learn-more","title":"Learn More","text":"<ul> <li>Quick Start Guide</li> <li>User Guide</li> <li>API Reference</li> <li>Examples</li> </ul>"},{"location":"#main-components","title":"Main Components","text":"Component What it does Example Usage ButtonUtils Click Appian buttons <code>ButtonUtils.clickByLabelText(wait, \"Submit\")</code> InputUtils Enter text in fields <code>InputUtils.setValueByLabelText(wait, \"Name\", \"John\")</code> DropdownUtils Select dropdown options <code>DropdownUtils.selectDropdownValueByLabelText(wait, \"Status\", \"Active\")</code> DateUtils Set date fields <code>DateUtils.setValueByLabelText(wait, \"Start Date\", \"01/15/2024\")</code> TableUtils Work with data tables <code>TableUtils.findTableByColumnName(wait, \"Employee ID\")</code> ComponentDriver Universal component action <code>ComponentDriver.execute(wait, \"Input Text\", \"Set Value\", \"Name\", \"John\")</code>"},{"location":"#author","title":"Author","text":"<p>Dinil Mithra LinkedIn | dinilmithra.mailme@gmail.com</p> <p>MIT License</p>"},{"location":"about/","title":"About the Author","text":""},{"location":"about/#dinil-mithra","title":"Dinil Mithra","text":"<p>Python Automation Engineer &amp; Appian Testing Specialist</p> <p>Dinil Mithra is a passionate software engineer with extensive experience in test automation, specializing in Appian application testing. With a deep understanding of both Python programming and Appian's unique UI architecture, Dinil created Robo Appian to bridge the gap between traditional test automation tools and Appian's dynamic interface requirements.</p>"},{"location":"about/#professional-background","title":"Professional Background","text":"<ul> <li>Expertise: Python automation, Selenium WebDriver, Appian platform testing</li> <li>Focus Areas: UI test automation, framework development, quality assurance</li> <li>Experience: Enterprise application testing, automation strategy, and tooling development</li> </ul>"},{"location":"about/#why-robo-appian","title":"Why Robo Appian?","text":"<p>Dinil developed Robo Appian after encountering the recurring challenges that teams face when automating tests for Appian applications:</p> <ul> <li>Fragile Test Scripts: Traditional selectors breaking with Appian updates</li> <li>Complex Element Location: Difficulty in reliably finding dynamic UI elements</li> <li>Poor Maintainability: Tests requiring constant updates with every release</li> <li>Steep Learning Curve: Complex XPath expressions that business users couldn't understand</li> </ul> <p>Robo Appian was born from the need for a more intuitive, reliable, and maintainable approach to Appian test automation.</p>"},{"location":"about/#philosophy","title":"Philosophy","text":"<p>\"Test automation should be accessible to everyone on the team, not just automation engineers. When business users can read and understand test code, the entire team becomes empowered to contribute to quality.\"</p>"},{"location":"about/#technical-contributions","title":"Technical Contributions","text":"<p>Robo Appian Features Pioneered by Dinil:</p> <ul> <li>Label-Based Interaction: Revolutionary approach using visible text for element interaction</li> <li>Smart Locator Strategies: Adaptive element finding that works with Appian's dynamic nature</li> <li>Business-Readable Tests: Code that bridges the gap between technical and business teams</li> <li>Robust Error Handling: Graceful failure management with actionable error messages</li> </ul>"},{"location":"about/#connect-with-dinil","title":"Connect with Dinil","text":"<ul> <li>LinkedIn: Connect professionally</li> <li>Email: dinilmithra.mailme@gmail.com</li> </ul>"},{"location":"about/#questions-collaboration","title":"Questions &amp; Collaboration","text":"<p>Dinil is always interested in:</p> <ul> <li>Feedback: How Robo Appian is working for your team</li> <li>Feature Requests: New capabilities that would benefit the community</li> <li>Collaboration: Working with other Appian automation engineers</li> <li>Knowledge Sharing: Best practices and lessons learned</li> </ul>"},{"location":"about/#support-the-project","title":"Support the Project","text":"<p>If Robo Appian has helped your team, consider:</p> <ul> <li>Sharing Your Experience: Tell others about your success stories</li> <li>Contributing Feedback: Help improve the library with your insights</li> <li>Recommending: Introduce Robo Appian to other teams facing similar challenges</li> </ul>"},{"location":"about/#acknowledgments","title":"Acknowledgments","text":"<p>Special thanks to the Appian testing community for their feedback, suggestions, and real-world use cases that have shaped Robo Appian into what it is today.</p>"},{"location":"about/#community-contributions","title":"Community Contributions","text":"<p>The development of Robo Appian has been influenced by:</p> <ul> <li>Beta Testers: Early adopters who provided crucial feedback</li> <li>Feature Requesters: Users who identified gaps and suggested improvements</li> <li>Bug Reporters: Those who helped identify and resolve issues</li> <li>Documentation Contributors: Community members who helped improve clarity</li> </ul> <p>\"Building tools that make testing easier and more accessible is not just about code \u2013 it's about empowering teams to deliver better software.\"</p> <p>\u2014 Dinil Mithra, Creator of Robo Appian</p>"},{"location":"api/button-utils/","title":"ButtonUtils","text":"<p>The <code>ButtonUtils</code> class provides convenient methods for interacting with button components in Appian applications. It simplifies button interactions by allowing you to locate and click buttons using their visible labels or HTML attributes.</p>"},{"location":"api/button-utils/#overview","title":"Overview","text":"<p>ButtonUtils is designed to handle Appian's dynamic button structures, providing reliable methods to:</p> <ul> <li>Click buttons by their visible label text</li> <li>Click buttons by their HTML ID</li> <li>Handle Appian's complex button hierarchies automatically</li> </ul>"},{"location":"api/button-utils/#class-methods","title":"Class Methods","text":""},{"location":"api/button-utils/#clickbylabeltext","title":"clickByLabelText()","text":"<p>Finds a button by its visible label text and clicks it.</p> <p>Parameters: - <code>wait</code> (WebDriverWait): Selenium WebDriverWait instance for element waiting - <code>label</code> (str): The visible text label of the button to click</p> <p>Usage Example: <pre><code>from selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom robo_appian.components.ButtonUtils import ButtonUtils\n\ndriver = webdriver.Chrome()\nwait = WebDriverWait(driver, 10)\n\n# Click a submit button\nButtonUtils.clickByLabelText(wait, \"Submit\")\n\n# Click a cancel button\nButtonUtils.clickByLabelText(wait, \"Cancel\")\n\n# Click a save button\nButtonUtils.clickByLabelText(wait, \"Save Changes\")\n</code></pre></p> <p>Error Handling: Raises <code>RuntimeError</code> if the button is not found or not clickable.</p>"},{"location":"api/button-utils/#clickbyid","title":"clickById()","text":"<p>Finds a button by its HTML ID attribute and clicks it.</p> <p>Signature: <pre><code>@staticmethod\ndef clickById(wait: WebDriverWait, id: str) -&gt; None\n</code></pre></p> <p>Parameters: - <code>wait</code> (WebDriverWait): Selenium WebDriverWait instance for element waiting - <code>id</code> (str): The HTML ID attribute of the button to click</p> <p>Usage Example: <pre><code>from selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom robo_appian.components.ButtonUtils import ButtonUtils\n\ndriver = webdriver.Chrome()\nwait = WebDriverWait(driver, 10)\n\n# Click a button by its ID\nButtonUtils.clickById(wait, \"submit_button_id\")\n\n# Click another button by ID\nButtonUtils.clickById(wait, \"cancel_btn\")\n</code></pre></p> <p>Error Handling: Raises <code>RuntimeError</code> if the button with the specified ID is not found or not clickable.</p>"},{"location":"api/button-utils/#best-practices","title":"Best Practices","text":""},{"location":"api/button-utils/#label-based-vs-id-based-selection","title":"Label-Based vs ID-Based Selection","text":"<p>Prefer label-based selection when possible: <pre><code># \u2705 Recommended - more readable and maintainable\nButtonUtils.clickByLabelText(wait, \"Submit Application\")\n\n# \u274c Less preferred - brittle and hard to understand\nButtonUtils.clickById(wait, \"btn_submit_app_v2_final\")\n</code></pre></p>"},{"location":"api/button-utils/#handle-dynamic-labels","title":"Handle Dynamic Labels","text":"<p>For buttons with dynamic or partial labels, ensure you use the exact text: <pre><code># If button shows \"Submit (3 items)\"\nButtonUtils.clickByLabelText(wait, \"Submit (3 items)\")\n\n# For partial matching, consider using contains in custom XPath\n</code></pre></p>"},{"location":"api/button-utils/#error-handling","title":"Error Handling","text":"<p>Always wrap button interactions in try-catch blocks for robust error handling: <pre><code>try:\n    ButtonUtils.clickByLabelText(wait, \"Submit\")\n    print(\"Button clicked successfully\")\nexcept RuntimeError as e:\n    print(f\"Failed to click button: {e}\")\n</code></pre></p>"},{"location":"api/button-utils/#common-use-cases","title":"Common Use Cases","text":""},{"location":"api/button-utils/#form-submission","title":"Form Submission","text":"<pre><code># Fill form and submit\nInputUtils.setValueByLabelText(wait, \"Name\", \"John Doe\")\nInputUtils.setValueByLabelText(wait, \"Email\", \"john@example.com\")\nButtonUtils.clickByLabelText(wait, \"Submit\")\n</code></pre>"},{"location":"api/button-utils/#navigation","title":"Navigation","text":"<pre><code># Navigate through application\nButtonUtils.clickByLabelText(wait, \"Next\")\nButtonUtils.clickByLabelText(wait, \"Previous\")\nButtonUtils.clickByLabelText(wait, \"Finish\")\n</code></pre>"},{"location":"api/button-utils/#dialog-actions","title":"Dialog Actions","text":"<pre><code># Handle confirmation dialogs\nButtonUtils.clickByLabelText(wait, \"Confirm\")\nButtonUtils.clickByLabelText(wait, \"Cancel\")\nButtonUtils.clickByLabelText(wait, \"OK\")\n</code></pre>"},{"location":"api/button-utils/#file-operations","title":"File Operations","text":"<pre><code># File upload/download actions\nButtonUtils.clickByLabelText(wait, \"Upload File\")\nButtonUtils.clickByLabelText(wait, \"Download\")\nButtonUtils.clickByLabelText(wait, \"Browse\")\n</code></pre>"},{"location":"api/button-utils/#technical-details","title":"Technical Details","text":""},{"location":"api/button-utils/#xpath-strategy","title":"XPath Strategy","text":"<p>ButtonUtils uses sophisticated XPath expressions to locate buttons: <pre><code>.//button[./span[contains(translate(normalize-space(.), '\\u00a0', ' '), '{label}')]]\n</code></pre></p> <p>This XPath: - Looks for <code>&lt;button&gt;</code> elements - Searches for nested <code>&lt;span&gt;</code> elements containing the label text - Handles non-breaking spaces and whitespace normalization - Uses case-sensitive matching for precision</p>"},{"location":"api/button-utils/#element-wait-strategy","title":"Element Wait Strategy","text":"<ul> <li>Uses <code>EC.element_to_be_clickable()</code> to ensure buttons are ready for interaction</li> <li>Respects the WebDriverWait timeout settings</li> <li>Automatically handles Appian's dynamic loading states</li> </ul>"},{"location":"api/button-utils/#troubleshooting","title":"Troubleshooting","text":""},{"location":"api/button-utils/#common-issues","title":"Common Issues","text":"<p>Button Not Found: <pre><code>RuntimeError: Button with label 'Submit' not found or not clickable.\n</code></pre> Solutions: - Verify the exact button text (check for extra spaces, special characters) - Ensure the button is visible and not disabled - Wait for any loading states to complete - Check if button is inside a frame or dialog</p> <p>Button Not Clickable: <pre><code>RuntimeError: Button with label 'Submit' not found or not clickable.\n</code></pre> Solutions: - Increase WebDriverWait timeout - Ensure no overlays or modals are blocking the button - Verify button is not disabled in the UI - Check if page is fully loaded</p>"},{"location":"api/button-utils/#debugging-tips","title":"Debugging Tips","text":"<ol> <li>Inspect the button element in browser developer tools</li> <li>Verify the exact text content including hidden characters</li> <li>Check button state (enabled/disabled, visible/hidden)</li> <li>Use explicit waits before button interactions</li> </ol>"},{"location":"api/button-utils/#integration-examples","title":"Integration Examples","text":""},{"location":"api/button-utils/#with-pytest","title":"With pytest","text":"<pre><code>import pytest\nfrom selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom robo_appian.components.ButtonUtils import ButtonUtils\n\nclass TestButtonInteractions:\n    def setup_method(self):\n        self.driver = webdriver.Chrome()\n        self.wait = WebDriverWait(self.driver, 10)\n\n    def teardown_method(self):\n        self.driver.quit()\n\n    def test_submit_button_click(self):\n        self.driver.get(\"https://your-appian-app.com\")\n        ButtonUtils.clickByLabelText(self.wait, \"Submit\")\n        # Add assertions here\n</code></pre>"},{"location":"api/button-utils/#with-page-object-model","title":"With Page Object Model","text":"<pre><code>class AppianFormPage:\n    def __init__(self, driver):\n        self.driver = driver\n        self.wait = WebDriverWait(driver, 10)\n\n    def submit_form(self):\n        ButtonUtils.clickByLabelText(self.wait, \"Submit\")\n\n    def cancel_form(self):\n        ButtonUtils.clickByLabelText(self.wait, \"Cancel\")\n</code></pre>"},{"location":"api/button-utils/#related-components","title":"Related Components","text":"<ul> <li>InputUtils - For form field interactions</li> <li>DropdownUtils - For dropdown selections</li> <li>LinkUtils - For link navigation</li> <li>ComponentDriver - For universal component interactions</li> </ul> <p>ButtonUtils provides the foundation for reliable button interactions in Appian applications, abstracting away the complexity of Appian's dynamic UI structure.</p>"},{"location":"api/component-driver/","title":"ComponentDriver API Reference","text":"<p>The <code>ComponentDriver</code> class provides a unified interface for executing actions on various component types using a single method call. This utility simplifies automation scripts by providing a consistent API across different Appian UI components.</p>"},{"location":"api/component-driver/#import","title":"Import","text":"<pre><code>from robo_appian.controllers.ComponentDriver import ComponentDriver\n</code></pre>"},{"location":"api/component-driver/#universal-execute-method","title":"Universal Execute Method","text":""},{"location":"api/component-driver/#execute","title":"execute()","text":"<p>Executes actions on any supported component type using a unified interface.</p> <p>Syntax: <pre><code>ComponentDriver.execute(wait, component_type, action, label, value)\n</code></pre></p> <p>Parameters: - <code>wait</code> (WebDriverWait): Selenium WebDriverWait instance - <code>component_type</code> (str): Type of component to interact with - <code>action</code> (str): Action to perform on the component - <code>label</code> (str): Label text to identify the component - <code>value</code> (str|None): Value to set (None for click actions)</p> <p>Returns: - Result varies by component type and action</p>"},{"location":"api/component-driver/#supported-components","title":"Supported Components","text":""},{"location":"api/component-driver/#date-components","title":"Date Components","text":"<p>Handle date picker and date input components.</p> <p>Component Type: <code>\"Date\"</code> Supported Actions: <code>\"Set Value\"</code></p> <pre><code>ComponentDriver.execute(wait, \"Date\", \"Set Value\", \"Start Date\", \"01/15/2024\")\n</code></pre>"},{"location":"api/component-driver/#input-text-components","title":"Input Text Components","text":"<p>Handle standard text input fields, text areas, and password fields.</p> <p>Component Type: <code>\"Input Text\"</code> Supported Actions: <code>\"Set Value\"</code></p> <pre><code>ComponentDriver.execute(wait, \"Input Text\", \"Set Value\", \"First Name\", \"John\")\n</code></pre>"},{"location":"api/component-driver/#dropdown-components","title":"Dropdown Components","text":"<p>Handle standard dropdown/select components.</p> <p>Component Type: <code>\"Dropdown\"</code> Supported Actions: <code>\"Select\"</code></p> <pre><code>ComponentDriver.execute(wait, \"Dropdown\", \"Select\", \"Department\", \"Engineering\")\n</code></pre>"},{"location":"api/component-driver/#button-components","title":"Button Components","text":"<p>Handle button elements for actions like submit, save, etc.</p> <p>Component Type: <code>\"Button\"</code> Supported Actions: <code>\"Click\"</code></p> <pre><code>ComponentDriver.execute(wait, \"Button\", \"Click\", \"Save Employee\", None)\n</code></pre>"},{"location":"api/component-driver/#tab-components","title":"Tab Components","text":"<p>Handle tab navigation in multi-step forms.</p> <p>Component Type: <code>\"Tab\"</code> Supported Actions: <code>\"Click\"</code></p> <pre><code>ComponentDriver.execute(wait, \"Tab\", \"Click\", \"Personal Information\", None)\n</code></pre>"},{"location":"api/component-driver/#example-usage","title":"Example Usage","text":"<pre><code>from selenium.webdriver.support.ui import WebDriverWait\nfrom robo_appian.controllers.ComponentDriver import ComponentDriver\n\nwait = WebDriverWait(driver, 10)\nComponentDriver.execute(wait, \"Input Text\", \"Set Value\", \"Username\", \"john.doe\")\nComponentDriver.execute(wait, \"Button\", \"Click\", \"Login\", None)\n</code></pre>"},{"location":"api/component-driver/#see-also","title":"See Also","text":"<ul> <li>DropdownUtils</li> <li>ButtonUtils</li> <li>TabUtils</li> </ul>"},{"location":"api/component-utils/","title":"ComponentUtils API Reference","text":"<p>The <code>ComponentUtils</code> class provides fundamental utilities for component interaction, date operations, and element validation in Robo Appian.</p>"},{"location":"api/component-utils/#import","title":"Import","text":"<pre><code>from robo_appian.utils.ComponentUtils import ComponentUtils\n</code></pre>"},{"location":"api/component-utils/#date-utilities","title":"Date Utilities","text":""},{"location":"api/component-utils/#today","title":"today()","text":"<p>Returns today's date formatted as MM/DD/YYYY.</p> <p>Returns: - <code>str</code>: Today's date in MM/DD/YYYY format</p> <p>Example: <pre><code>today_date = ComponentUtils.today()\nprint(f\"Today's date: {today_date}\")  # Output: Today's date: 08/03/2025\n</code></pre></p>"},{"location":"api/component-utils/#yesterday","title":"yesterday()","text":"<p>Returns yesterday's date formatted as MM/DD/YYYY.</p> <p>Returns: - <code>str</code>: Yesterday's date in MM/DD/YYYY format</p> <p>Example: <pre><code>yesterday_date = ComponentUtils.yesterday()\nprint(f\"Yesterday's date: {yesterday_date}\")  # Output: Yesterday's date: 08/02/2025\n</code></pre></p>"},{"location":"api/component-utils/#component-location-methods","title":"Component Location Methods","text":""},{"location":"api/component-utils/#findcomponentusingxpathwait-xpath","title":"findComponentUsingXpath(wait, xpath)","text":"<p>Finds a component using the given XPath in the current WebDriver instance.</p> <p>Parameters: - <code>wait</code> (WebDriverWait): WebDriverWait instance to wait for elements - <code>xpath</code> (str): XPath string to locate the component</p> <p>Returns: - <code>WebElement</code>: The located WebElement</p> <p>Raises: - <code>NoSuchElementException</code>: If the element is not found</p> <p>Example: <pre><code>component = ComponentUtils.findComponentUsingXpath(wait, \"//button[@id='submit']\")\ncomponent.click()\n</code></pre></p>"},{"location":"api/component-utils/#findcomponentusingxpathandclickwait-xpath","title":"findComponentUsingXpathAndClick(wait, xpath)","text":"<p>Finds a component using the given XPath and clicks it.</p> <p>Parameters: - <code>wait</code> (WebDriverWait): WebDriverWait instance to wait for elements - <code>xpath</code> (str): XPath string to locate the component</p> <p>Returns: - <code>None</code></p> <p>Example: <pre><code>ComponentUtils.findComponentUsingXpathAndClick(wait, \"//button[@id='submit']\")\n</code></pre></p>"},{"location":"api/component-utils/#findchildcomponentwait-component-xpath","title":"findChildComponent(wait, component, xpath)","text":"<p>Finds a child component using the given XPath within a parent component.</p> <p>Parameters: - <code>wait</code> (WebDriverWait): WebDriverWait instance to wait for elements - <code>component</code> (WebElement): Parent WebElement to search within - <code>xpath</code> (str): XPath string to locate the child component</p> <p>Returns: - <code>WebElement</code>: The located child WebElement</p> <p>Example: <pre><code>parent_component = driver.find_element(By.ID, \"parent\")\nchild_component = ComponentUtils.findChildComponent(wait, parent_component, \".//button[@class='child']\")\n</code></pre></p>"},{"location":"api/component-utils/#findcomponentsbyxpathwait-xpath","title":"findComponentsByXPath(wait, xpath)","text":"<p>Finds all components matching the given XPath and returns a list of valid components that are clickable and displayed.</p> <p>Parameters: - <code>wait</code> (WebDriverWait): WebDriverWait instance to wait for elements - <code>xpath</code> (str): XPath string to locate components</p> <p>Returns: - <code>List[WebElement]</code>: List of valid WebElement components</p> <p>Raises: - <code>Exception</code>: If no valid components are found</p> <p>Example: <pre><code>components = ComponentUtils.findComponentsByXPath(wait, \"//button[@class='submit']\")\nfor component in components:\n    component.click()\n</code></pre></p>"},{"location":"api/component-utils/#validation-methods","title":"Validation Methods","text":""},{"location":"api/component-utils/#checkcomponentexistsbyxpathwait-xpath","title":"checkComponentExistsByXpath(wait, xpath)","text":"<p>Checks if a component with the given XPath exists in the current WebDriver instance.</p> <p>Parameters: - <code>wait</code> (WebDriverWait): WebDriverWait instance to wait for elements - <code>xpath</code> (str): XPath string to locate the component</p> <p>Returns: - <code>bool</code>: True if the component exists, False otherwise</p> <p>Example: <pre><code>if ComponentUtils.checkComponentExistsByXpath(wait, \"//div[@id='success-message']\"):\n    print(\"Success message found!\")\nelse:\n    print(\"Success message not found!\")\n</code></pre></p>"},{"location":"api/component-utils/#checkcomponentexistsbyiddriver-id","title":"checkComponentExistsById(driver, id)","text":"<p>Checks if a component with the given ID exists in the current WebDriver instance.</p> <p>Parameters: - <code>driver</code> (WebDriver): WebDriver instance to check for the component - <code>id</code> (str): ID of the component to check</p> <p>Returns: - <code>bool</code>: True if the component exists, False otherwise</p> <p>Example: <pre><code>exists = ComponentUtils.checkComponentExistsById(driver, \"submit-button\")\nprint(f\"Component exists: {exists}\")\n</code></pre></p>"},{"location":"api/component-utils/#findcountwait-xpath","title":"findCount(wait, xpath)","text":"<p>Finds the count of components matching the given XPath.</p> <p>Parameters: - <code>wait</code> (WebDriverWait): WebDriverWait instance to wait for elements - <code>xpath</code> (str): XPath string to locate components</p> <p>Returns: - <code>int</code>: Count of components matching the XPath</p> <p>Example: <pre><code>count = ComponentUtils.findCount(wait, \"//div[@class='item']\")\nprint(f\"Number of items found: {count}\")\n</code></pre></p>"},{"location":"api/component-utils/#utility-methods","title":"Utility Methods","text":""},{"location":"api/component-utils/#tabwait","title":"tab(wait)","text":"<p>Simulates a tab key press in the current WebDriver instance.</p> <p>Parameters: - <code>wait</code> (WebDriverWait): WebDriverWait instance to wait for elements</p> <p>Returns: - <code>None</code></p> <p>Example: <pre><code>ComponentUtils.tab(wait)  # Presses Tab key\n</code></pre></p>"},{"location":"api/component-utils/#complete-usage-example","title":"Complete Usage Example","text":"<pre><code>from selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom robo_appian.utils.ComponentUtils import ComponentUtils\n\ndef test_component_utils():\n    driver = webdriver.Chrome()\n    wait = WebDriverWait(driver, 10)\n\n    try:\n        driver.get(\"https://example.com\")\n\n        # Get today's date for form filling\n        today = ComponentUtils.today()\n        yesterday = ComponentUtils.yesterday()\n        print(f\"Today: {today}, Yesterday: {yesterday}\")\n\n        # Check if a component exists before interacting\n        if ComponentUtils.checkComponentExistsByXpath(wait, \"//input[@id='date-field']\"):\n            date_field = ComponentUtils.findComponentUsingXpath(wait, \"//input[@id='date-field']\")\n            date_field.send_keys(today)\n\n        # Count how many buttons are on the page\n        button_count = ComponentUtils.findCount(wait, \"//button\")\n        print(f\"Found {button_count} buttons on the page\")\n\n        # Find and click all submit buttons\n        submit_buttons = ComponentUtils.findComponentsByXPath(wait, \"//button[contains(@class, 'submit')]\")\n        for button in submit_buttons:\n            button.click()\n\n        # Use tab to navigate\n        ComponentUtils.tab(wait)\n\n        # Check if operation was successful\n        if ComponentUtils.checkComponentExistsByXpath(wait, \"//div[@class='success']\"):\n            print(\"Operation completed successfully!\")\n\n    finally:\n        driver.quit()\n\nif __name__ == \"__main__\":\n    test_component_utils()\n</code></pre>"},{"location":"api/component-utils/#related-components","title":"Related Components","text":"<ul> <li>ButtonUtils - For button-specific operations</li> <li>InputUtils - For input field operations</li> <li>TableUtils - For table operations</li> </ul>"},{"location":"api/component-utils/#robo_appian.utils.ComponentUtils","title":"<code>ComponentUtils</code>","text":""},{"location":"api/component-utils/#robo_appian.utils.ComponentUtils-classes","title":"Classes","text":""},{"location":"api/component-utils/#robo_appian.utils.ComponentUtils.ComponentUtils","title":"<code>ComponentUtils</code>","text":"Source code in <code>robo_appian/utils/ComponentUtils.py</code> <pre><code>class ComponentUtils:\n    @staticmethod\n    def today():\n        \"\"\"\n        Returns today's date formatted as MM/DD/YYYY.\n        \"\"\"\n\n        from datetime import date\n\n        today = date.today()\n        yesterday_formatted = today.strftime(\"%m/%d/%Y\")\n        return yesterday_formatted\n\n    @staticmethod\n    def yesterday():\n        \"\"\"\n        Returns yesterday's date formatted as MM/DD/YYYY.\n        \"\"\"\n\n        from datetime import date, timedelta\n\n        yesterday = date.today() - timedelta(days=1)\n        yesterday_formatted = yesterday.strftime(\"%m/%d/%Y\")\n        return yesterday_formatted\n\n    @staticmethod\n    def findChildComponent(wait: WebDriverWait, component: WebElement, xpath: str):\n        \"\"\"Finds a child component using the given XPath within a parent component.\n\n        :param wait: WebDriverWait instance to wait for elements\n        :param component: Parent WebElement to search within\n        :param xpath: XPath string to locate the child component\n        :return: WebElement if found, raises NoSuchElementException otherwise\n        Example usage:\n        from selenium.webdriver.support.ui import WebDriverWait\n        from selenium import webdriver\n\n        driver = webdriver.Chrome()\n        wait = WebDriverWait(driver, 10)\n        parent_component = driver.find_element(By.ID, \"parent\")\n        xpath = \".//button[@class='child']\"\n        child_component = ComponentUtils.findChildComponent(wait, parent_component, xpath)\n        \"\"\"\n        return component.find_element(By.XPATH, xpath)\n\n    @staticmethod\n    def findComponentUsingXpathAndClick(wait: WebDriverWait, xpath: str):\n        \"\"\"Finds a component using the given XPath and clicks it.\n\n        :param wait: WebDriverWait instance to wait for elements\n        :param xpath: XPath string to locate the component\n        :return: None\n        Example usage:\n        from selenium.webdriver.support.ui import WebDriverWait\n        from selenium import webdriver\n\n        driver = webdriver.Chrome()\n        wait = WebDriverWait(driver, 10)\n        xpath = \"//button[@id='submit']\"\n        ComponentUtils.findComponentUsingXpathAndClick(wait, xpath)\n        \"\"\"\n        component = ComponentUtils.findComponentUsingXpath(wait, xpath)\n        component.click()\n\n    @staticmethod\n    def findComponentUsingXpath(wait: WebDriverWait, xpath: str):\n        \"\"\"Finds a component using the given XPath in the current WebDriver instance.\n\n        :param wait: WebDriverWait instance to wait for elements\n        :param xpath: XPath string to locate the component\n        :return: WebElement if found, raises NoSuchElementException otherwise\n        Example usage:\n        component = ComponentUtils.findComponentUsingXpath(wait, \"//button[@id='submit']\")\n        component.click()\n        \"\"\"\n        component = wait.until(EC.presence_of_element_located((By.XPATH, xpath)))\n        return component\n\n    @staticmethod\n    def checkComponentExistsByXpath(wait: WebDriverWait, xpath: str):\n        \"\"\"Checks if a component with the given XPath exists in the current WebDriver instance.\"\"\"\n        status = False\n        try:\n            ComponentUtils.findComponentUsingXpath(wait, xpath)\n            status = True\n        except NoSuchElementException:\n            pass\n\n        return status\n\n    @staticmethod\n    def checkComponentExistsById(driver: WebDriver, id: str):\n        \"\"\"Checks if a component with the given ID exists in the current WebDriver instance.\n\n        :param driver: WebDriver instance to check for the component\n        :param id: ID of the component to check\n        :return: True if the component exists, False otherwise\n        Example usage:\n        exists = ComponentUtils.checkComponentExistsById(driver, \"submit-button\")\n        print(f\"Component exists: {exists}\")\n        \"\"\"\n        status = False\n        try:\n            driver.find_element(By.ID, id)\n            status = True\n        except NoSuchElementException:\n            pass\n\n        return status\n\n    @staticmethod\n    def findCount(wait: WebDriverWait, xpath: str):\n        \"\"\"Finds the count of components matching the given XPath.\n\n        :param wait: WebDriverWait instance to wait for elements\n        :param xpath: XPath string to locate components\n        :return: Count of components matching the XPath\n        Example usage:\n        count = ComponentUtils.findCount(wait, \"//div[@class='item']\")\n        print(f\"Number of items found: {count}\")\n        \"\"\"\n\n        length = 0\n\n        try:\n            component = wait.until(EC.presence_of_all_elements_located((By.XPATH, xpath)))\n            length = len(component)\n        except NoSuchElementException:\n            pass\n\n        return length\n\n    @staticmethod\n    def tab(wait: WebDriverWait):\n        \"\"\"Simulates a tab key press in the current WebDriver instance.\n\n        :param wait: WebDriverWait instance to wait for elements\n        :return: None\n        Example usage:\n        ComponentUtils.tab(wait)\n        \"\"\"\n        driver = wait._driver\n        actions = ActionChains(driver)\n        actions.send_keys(Keys.TAB).perform()\n\n    @staticmethod\n    def findComponentsByXPath(wait: WebDriverWait, xpath: str):\n        \"\"\"Finds all components matching the given XPath and returns a list of valid components\n        that are clickable and displayed.\n\n        :param wait: WebDriverWait instance to wait for elements\n        :param xpath: XPath string to locate components\n        :return: List of valid WebElement components\n        Example usage:\n        components = ComponentUtils.findComponentsByXPath(wait, \"//button[@class='submit']\")\n        for component in components:\n            component.click()\n        \"\"\"\n        # Wait for the presence of elements matching the XPath\n        wait.until(EC.presence_of_element_located((By.XPATH, xpath)))\n\n        # Find all matching elements\n        driver = wait._driver\n        components = driver.find_elements(By.XPATH, xpath)\n\n        # Filter for clickable and displayed components\n        valid_components = []\n        for component in components:\n            try:\n                if component.is_displayed() and component.is_enabled():\n                    valid_components.append(component)\n            except Exception:\n                continue\n\n        if len(valid_components) &gt; 0:\n            return valid_components\n\n        raise Exception(f\"No valid components found for XPath: {xpath}\")\n</code></pre>"},{"location":"api/component-utils/#robo_appian.utils.ComponentUtils.ComponentUtils-functions","title":"Functions","text":""},{"location":"api/component-utils/#robo_appian.utils.ComponentUtils.ComponentUtils.checkComponentExistsById","title":"<code>checkComponentExistsById(driver, id)</code>  <code>staticmethod</code>","text":"<p>Checks if a component with the given ID exists in the current WebDriver instance.</p> <p>:param driver: WebDriver instance to check for the component :param id: ID of the component to check :return: True if the component exists, False otherwise Example usage: exists = ComponentUtils.checkComponentExistsById(driver, \"submit-button\") print(f\"Component exists: {exists}\")</p> Source code in <code>robo_appian/utils/ComponentUtils.py</code> <pre><code>@staticmethod\ndef checkComponentExistsById(driver: WebDriver, id: str):\n    \"\"\"Checks if a component with the given ID exists in the current WebDriver instance.\n\n    :param driver: WebDriver instance to check for the component\n    :param id: ID of the component to check\n    :return: True if the component exists, False otherwise\n    Example usage:\n    exists = ComponentUtils.checkComponentExistsById(driver, \"submit-button\")\n    print(f\"Component exists: {exists}\")\n    \"\"\"\n    status = False\n    try:\n        driver.find_element(By.ID, id)\n        status = True\n    except NoSuchElementException:\n        pass\n\n    return status\n</code></pre>"},{"location":"api/component-utils/#robo_appian.utils.ComponentUtils.ComponentUtils.checkComponentExistsByXpath","title":"<code>checkComponentExistsByXpath(wait, xpath)</code>  <code>staticmethod</code>","text":"<p>Checks if a component with the given XPath exists in the current WebDriver instance.</p> Source code in <code>robo_appian/utils/ComponentUtils.py</code> <pre><code>@staticmethod\ndef checkComponentExistsByXpath(wait: WebDriverWait, xpath: str):\n    \"\"\"Checks if a component with the given XPath exists in the current WebDriver instance.\"\"\"\n    status = False\n    try:\n        ComponentUtils.findComponentUsingXpath(wait, xpath)\n        status = True\n    except NoSuchElementException:\n        pass\n\n    return status\n</code></pre>"},{"location":"api/component-utils/#robo_appian.utils.ComponentUtils.ComponentUtils.findChildComponent","title":"<code>findChildComponent(wait, component, xpath)</code>  <code>staticmethod</code>","text":"<p>Finds a child component using the given XPath within a parent component.</p> <p>:param wait: WebDriverWait instance to wait for elements :param component: Parent WebElement to search within :param xpath: XPath string to locate the child component :return: WebElement if found, raises NoSuchElementException otherwise Example usage: from selenium.webdriver.support.ui import WebDriverWait from selenium import webdriver</p> <p>driver = webdriver.Chrome() wait = WebDriverWait(driver, 10) parent_component = driver.find_element(By.ID, \"parent\") xpath = \".//button[@class='child']\" child_component = ComponentUtils.findChildComponent(wait, parent_component, xpath)</p> Source code in <code>robo_appian/utils/ComponentUtils.py</code> <pre><code>@staticmethod\ndef findChildComponent(wait: WebDriverWait, component: WebElement, xpath: str):\n    \"\"\"Finds a child component using the given XPath within a parent component.\n\n    :param wait: WebDriverWait instance to wait for elements\n    :param component: Parent WebElement to search within\n    :param xpath: XPath string to locate the child component\n    :return: WebElement if found, raises NoSuchElementException otherwise\n    Example usage:\n    from selenium.webdriver.support.ui import WebDriverWait\n    from selenium import webdriver\n\n    driver = webdriver.Chrome()\n    wait = WebDriverWait(driver, 10)\n    parent_component = driver.find_element(By.ID, \"parent\")\n    xpath = \".//button[@class='child']\"\n    child_component = ComponentUtils.findChildComponent(wait, parent_component, xpath)\n    \"\"\"\n    return component.find_element(By.XPATH, xpath)\n</code></pre>"},{"location":"api/component-utils/#robo_appian.utils.ComponentUtils.ComponentUtils.findComponentUsingXpath","title":"<code>findComponentUsingXpath(wait, xpath)</code>  <code>staticmethod</code>","text":"<p>Finds a component using the given XPath in the current WebDriver instance.</p> <p>:param wait: WebDriverWait instance to wait for elements :param xpath: XPath string to locate the component :return: WebElement if found, raises NoSuchElementException otherwise Example usage: component = ComponentUtils.findComponentUsingXpath(wait, \"//button[@id='submit']\") component.click()</p> Source code in <code>robo_appian/utils/ComponentUtils.py</code> <pre><code>@staticmethod\ndef findComponentUsingXpath(wait: WebDriverWait, xpath: str):\n    \"\"\"Finds a component using the given XPath in the current WebDriver instance.\n\n    :param wait: WebDriverWait instance to wait for elements\n    :param xpath: XPath string to locate the component\n    :return: WebElement if found, raises NoSuchElementException otherwise\n    Example usage:\n    component = ComponentUtils.findComponentUsingXpath(wait, \"//button[@id='submit']\")\n    component.click()\n    \"\"\"\n    component = wait.until(EC.presence_of_element_located((By.XPATH, xpath)))\n    return component\n</code></pre>"},{"location":"api/component-utils/#robo_appian.utils.ComponentUtils.ComponentUtils.findComponentUsingXpathAndClick","title":"<code>findComponentUsingXpathAndClick(wait, xpath)</code>  <code>staticmethod</code>","text":"<p>Finds a component using the given XPath and clicks it.</p> <p>:param wait: WebDriverWait instance to wait for elements :param xpath: XPath string to locate the component :return: None Example usage: from selenium.webdriver.support.ui import WebDriverWait from selenium import webdriver</p> <p>driver = webdriver.Chrome() wait = WebDriverWait(driver, 10) xpath = \"//button[@id='submit']\" ComponentUtils.findComponentUsingXpathAndClick(wait, xpath)</p> Source code in <code>robo_appian/utils/ComponentUtils.py</code> <pre><code>@staticmethod\ndef findComponentUsingXpathAndClick(wait: WebDriverWait, xpath: str):\n    \"\"\"Finds a component using the given XPath and clicks it.\n\n    :param wait: WebDriverWait instance to wait for elements\n    :param xpath: XPath string to locate the component\n    :return: None\n    Example usage:\n    from selenium.webdriver.support.ui import WebDriverWait\n    from selenium import webdriver\n\n    driver = webdriver.Chrome()\n    wait = WebDriverWait(driver, 10)\n    xpath = \"//button[@id='submit']\"\n    ComponentUtils.findComponentUsingXpathAndClick(wait, xpath)\n    \"\"\"\n    component = ComponentUtils.findComponentUsingXpath(wait, xpath)\n    component.click()\n</code></pre>"},{"location":"api/component-utils/#robo_appian.utils.ComponentUtils.ComponentUtils.findComponentsByXPath","title":"<code>findComponentsByXPath(wait, xpath)</code>  <code>staticmethod</code>","text":"<p>Finds all components matching the given XPath and returns a list of valid components that are clickable and displayed.</p> <p>:param wait: WebDriverWait instance to wait for elements :param xpath: XPath string to locate components :return: List of valid WebElement components Example usage: components = ComponentUtils.findComponentsByXPath(wait, \"//button[@class='submit']\") for component in components:     component.click()</p> Source code in <code>robo_appian/utils/ComponentUtils.py</code> <pre><code>@staticmethod\ndef findComponentsByXPath(wait: WebDriverWait, xpath: str):\n    \"\"\"Finds all components matching the given XPath and returns a list of valid components\n    that are clickable and displayed.\n\n    :param wait: WebDriverWait instance to wait for elements\n    :param xpath: XPath string to locate components\n    :return: List of valid WebElement components\n    Example usage:\n    components = ComponentUtils.findComponentsByXPath(wait, \"//button[@class='submit']\")\n    for component in components:\n        component.click()\n    \"\"\"\n    # Wait for the presence of elements matching the XPath\n    wait.until(EC.presence_of_element_located((By.XPATH, xpath)))\n\n    # Find all matching elements\n    driver = wait._driver\n    components = driver.find_elements(By.XPATH, xpath)\n\n    # Filter for clickable and displayed components\n    valid_components = []\n    for component in components:\n        try:\n            if component.is_displayed() and component.is_enabled():\n                valid_components.append(component)\n        except Exception:\n            continue\n\n    if len(valid_components) &gt; 0:\n        return valid_components\n\n    raise Exception(f\"No valid components found for XPath: {xpath}\")\n</code></pre>"},{"location":"api/component-utils/#robo_appian.utils.ComponentUtils.ComponentUtils.findCount","title":"<code>findCount(wait, xpath)</code>  <code>staticmethod</code>","text":"<p>Finds the count of components matching the given XPath.</p> <p>:param wait: WebDriverWait instance to wait for elements :param xpath: XPath string to locate components :return: Count of components matching the XPath Example usage: count = ComponentUtils.findCount(wait, \"//div[@class='item']\") print(f\"Number of items found: {count}\")</p> Source code in <code>robo_appian/utils/ComponentUtils.py</code> <pre><code>@staticmethod\ndef findCount(wait: WebDriverWait, xpath: str):\n    \"\"\"Finds the count of components matching the given XPath.\n\n    :param wait: WebDriverWait instance to wait for elements\n    :param xpath: XPath string to locate components\n    :return: Count of components matching the XPath\n    Example usage:\n    count = ComponentUtils.findCount(wait, \"//div[@class='item']\")\n    print(f\"Number of items found: {count}\")\n    \"\"\"\n\n    length = 0\n\n    try:\n        component = wait.until(EC.presence_of_all_elements_located((By.XPATH, xpath)))\n        length = len(component)\n    except NoSuchElementException:\n        pass\n\n    return length\n</code></pre>"},{"location":"api/component-utils/#robo_appian.utils.ComponentUtils.ComponentUtils.tab","title":"<code>tab(wait)</code>  <code>staticmethod</code>","text":"<p>Simulates a tab key press in the current WebDriver instance.</p> <p>:param wait: WebDriverWait instance to wait for elements :return: None Example usage: ComponentUtils.tab(wait)</p> Source code in <code>robo_appian/utils/ComponentUtils.py</code> <pre><code>@staticmethod\ndef tab(wait: WebDriverWait):\n    \"\"\"Simulates a tab key press in the current WebDriver instance.\n\n    :param wait: WebDriverWait instance to wait for elements\n    :return: None\n    Example usage:\n    ComponentUtils.tab(wait)\n    \"\"\"\n    driver = wait._driver\n    actions = ActionChains(driver)\n    actions.send_keys(Keys.TAB).perform()\n</code></pre>"},{"location":"api/component-utils/#robo_appian.utils.ComponentUtils.ComponentUtils.today","title":"<code>today()</code>  <code>staticmethod</code>","text":"<p>Returns today's date formatted as MM/DD/YYYY.</p> Source code in <code>robo_appian/utils/ComponentUtils.py</code> <pre><code>@staticmethod\ndef today():\n    \"\"\"\n    Returns today's date formatted as MM/DD/YYYY.\n    \"\"\"\n\n    from datetime import date\n\n    today = date.today()\n    yesterday_formatted = today.strftime(\"%m/%d/%Y\")\n    return yesterday_formatted\n</code></pre>"},{"location":"api/component-utils/#robo_appian.utils.ComponentUtils.ComponentUtils.yesterday","title":"<code>yesterday()</code>  <code>staticmethod</code>","text":"<p>Returns yesterday's date formatted as MM/DD/YYYY.</p> Source code in <code>robo_appian/utils/ComponentUtils.py</code> <pre><code>@staticmethod\ndef yesterday():\n    \"\"\"\n    Returns yesterday's date formatted as MM/DD/YYYY.\n    \"\"\"\n\n    from datetime import date, timedelta\n\n    yesterday = date.today() - timedelta(days=1)\n    yesterday_formatted = yesterday.strftime(\"%m/%d/%Y\")\n    return yesterday_formatted\n</code></pre>"},{"location":"api/date-utils/","title":"DateUtils","text":"<p>The <code>DateUtils</code> class provides specialized methods for interacting with date picker components in Appian applications. It handles the unique challenges of date input fields, including date picker interactions and various date format requirements.</p>"},{"location":"api/date-utils/#overview","title":"Overview","text":"<p>DateUtils is designed to handle Appian's date components, providing reliable methods to:</p> <ul> <li>Set date values using visible label text</li> <li>Click date components to open date pickers</li> <li>Handle various date formats and input methods</li> <li>Manage Appian's specialized date input structures</li> </ul>"},{"location":"api/date-utils/#class-methods","title":"Class Methods","text":""},{"location":"api/date-utils/#setvaluebylabeltext","title":"setValueByLabelText()","text":"<p>Sets a date value in a date component by its visible label text.</p> <p>Parameters: - <code>wait</code> (WebDriverWait): Selenium WebDriverWait instance for element waiting - <code>label</code> (str): The visible text label of the date component - <code>value</code> (str): The date value to set (format depends on field configuration)</p> <p>Returns: - <code>WebElement</code>: The date input component after setting the value</p> <p>Usage Example: <pre><code>from selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom robo_appian.components.DateUtils import DateUtils\n\ndriver = webdriver.Chrome()\nwait = WebDriverWait(driver, 10)\n\n# Set start date\nDateUtils.setValueByLabelText(wait, \"Start Date\", \"01/15/2024\")\n\n# Set end date\nDateUtils.setValueByLabelText(wait, \"End Date\", \"12/31/2024\")\n\n# Set birth date\nDateUtils.setValueByLabelText(wait, \"Date of Birth\", \"05/20/1990\")\n\n# Set appointment date and time\nDateUtils.setValueByLabelText(wait, \"Appointment Date\", \"03/15/2024\")\n</code></pre></p>"},{"location":"api/date-utils/#clickbylabeltext","title":"clickByLabelText()","text":"<p>Clicks on a date component to open the date picker interface.</p> <p>Signature: <pre><code>@staticmethod\ndef clickByLabelText(wait: WebDriverWait, label: str) -&gt; WebElement\n</code></pre></p> <p>Parameters: - <code>wait</code> (WebDriverWait): Selenium WebDriverWait instance for element waiting - <code>label</code> (str): The visible text label of the date component</p> <p>Returns: - <code>WebElement</code>: The date input component that was clicked</p> <p>Usage Example: <pre><code># Click to open date picker\nDateUtils.clickByLabelText(wait, \"Start Date\")\n\n# After clicking, you can interact with the date picker\n# (Note: Additional methods would be needed for date picker navigation)\n\n# Alternative: Set value directly without opening picker\nDateUtils.setValueByLabelText(wait, \"Start Date\", \"01/15/2024\")\n</code></pre></p>"},{"location":"api/date-utils/#date-format-support","title":"Date Format Support","text":"<p>DateUtils supports various date formats depending on your Appian application configuration:</p>"},{"location":"api/date-utils/#common-date-formats","title":"Common Date Formats","text":"<pre><code># MM/DD/YYYY format (US)\nDateUtils.setValueByLabelText(wait, \"Start Date\", \"01/15/2024\")\n\n# DD/MM/YYYY format (European)\nDateUtils.setValueByLabelText(wait, \"Start Date\", \"15/01/2024\")\n\n# YYYY-MM-DD format (ISO)\nDateUtils.setValueByLabelText(wait, \"Start Date\", \"2024-01-15\")\n\n# MM-DD-YYYY format\nDateUtils.setValueByLabelText(wait, \"Start Date\", \"01-15-2024\")\n\n# Date with text month\nDateUtils.setValueByLabelText(wait, \"Start Date\", \"January 15, 2024\")\n</code></pre>"},{"location":"api/date-utils/#date-and-time-formats","title":"Date and Time Formats","text":"<pre><code># Date with time (12-hour format)\nDateUtils.setValueByLabelText(wait, \"Appointment\", \"01/15/2024 2:30 PM\")\n\n# Date with time (24-hour format)\nDateUtils.setValueByLabelText(wait, \"Appointment\", \"01/15/2024 14:30\")\n\n# ISO datetime format\nDateUtils.setValueByLabelText(wait, \"Timestamp\", \"2024-01-15T14:30:00\")\n</code></pre>"},{"location":"api/date-utils/#best-practices","title":"Best Practices","text":""},{"location":"api/date-utils/#determine-required-format","title":"Determine Required Format","text":"<p>Check field format requirements before setting values: <pre><code># Test with different formats to determine what's accepted\nformats_to_try = [\n    \"01/15/2024\",      # MM/DD/YYYY\n    \"15/01/2024\",      # DD/MM/YYYY  \n    \"2024-01-15\",      # YYYY-MM-DD\n    \"Jan 15, 2024\"     # Text format\n]\n\nfor date_format in formats_to_try:\n    try:\n        DateUtils.setValueByLabelText(wait, \"Start Date\", date_format)\n        print(f\"Accepted format: {date_format}\")\n        break\n    except Exception:\n        continue\n</code></pre></p>"},{"location":"api/date-utils/#validate-date-input","title":"Validate Date Input","text":"<p>Verify date was set correctly: <pre><code># Set date and verify\ndate_component = DateUtils.setValueByLabelText(wait, \"Start Date\", \"01/15/2024\")\n\n# Check if value was set correctly\ncurrent_value = date_component.get_attribute(\"value\")\nprint(f\"Date field value: {current_value}\")\n\n# Verify expected format\nexpected_date = \"01/15/2024\"\nassert expected_date in current_value, f\"Expected {expected_date}, got {current_value}\"\n</code></pre></p>"},{"location":"api/date-utils/#handle-date-picker-interactions","title":"Handle Date Picker Interactions","text":"<p>For complex date picker interactions: <pre><code>def select_date_from_picker(wait, label, target_date):\n    \"\"\"\n    Example function for complex date picker interaction\n    \"\"\"\n    # Open the date picker\n    DateUtils.clickByLabelText(wait, label)\n\n    # Custom logic for navigating date picker\n    # (Implementation would depend on specific date picker structure)\n\n    # Alternative: Use direct value setting\n    DateUtils.setValueByLabelText(wait, label, target_date)\n</code></pre></p>"},{"location":"api/date-utils/#common-use-cases","title":"Common Use Cases","text":""},{"location":"api/date-utils/#event-scheduling","title":"Event Scheduling","text":"<pre><code># Schedule meeting\nDateUtils.setValueByLabelText(wait, \"Meeting Date\", \"03/15/2024\")\nDateUtils.setValueByLabelText(wait, \"Start Time\", \"10:00 AM\")\nDateUtils.setValueByLabelText(wait, \"End Time\", \"11:30 AM\")\n</code></pre>"},{"location":"api/date-utils/#date-range-selection","title":"Date Range Selection","text":"<pre><code># Set date range for reports\nDateUtils.setValueByLabelText(wait, \"From Date\", \"01/01/2024\")\nDateUtils.setValueByLabelText(wait, \"To Date\", \"01/31/2024\")\n\n# Generate report\nButtonUtils.clickByLabelText(wait, \"Generate Report\")\n</code></pre>"},{"location":"api/date-utils/#employee-information","title":"Employee Information","text":"<pre><code># Employee details with dates\nInputUtils.setValueByLabelText(wait, \"Employee Name\", \"John Doe\")\nDateUtils.setValueByLabelText(wait, \"Hire Date\", \"01/15/2024\")\nDateUtils.setValueByLabelText(wait, \"Date of Birth\", \"05/20/1990\")\nDropdownUtils.selectDropdownValueByLabelText(wait, \"Department\", \"Engineering\")\n</code></pre>"},{"location":"api/date-utils/#project-timeline","title":"Project Timeline","text":"<pre><code># Project dates\nInputUtils.setValueByLabelText(wait, \"Project Name\", \"Website Redesign\")\nDateUtils.setValueByLabelText(wait, \"Start Date\", \"02/01/2024\")\nDateUtils.setValueByLabelText(wait, \"Expected End Date\", \"05/31/2024\")\nDateUtils.setValueByLabelText(wait, \"Milestone Date\", \"03/15/2024\")\n</code></pre>"},{"location":"api/date-utils/#financial-records","title":"Financial Records","text":"<pre><code># Invoice dates\nInputUtils.setValueByLabelText(wait, \"Invoice Number\", \"INV-2024-001\")\nDateUtils.setValueByLabelText(wait, \"Invoice Date\", \"01/15/2024\")\nDateUtils.setValueByLabelText(wait, \"Due Date\", \"02/14/2024\")\nInputUtils.setValueByLabelText(wait, \"Amount\", \"1500.00\")\n</code></pre>"},{"location":"api/date-utils/#technical-details","title":"Technical Details","text":""},{"location":"api/date-utils/#date-component-location","title":"Date Component Location","text":"<p>DateUtils uses a specific XPath strategy to locate date inputs: <pre><code>.//div[./div/label[text()=\"{label}\"]]/div/div/div/input\n</code></pre></p> <p>This XPath: - Finds the label element with exact text match - Navigates to the associated input element - Handles Appian's nested div structure for date components</p>"},{"location":"api/date-utils/#integration-with-inpututils","title":"Integration with InputUtils","text":"<p>DateUtils leverages <code>InputUtils._setValueByComponent()</code> for value setting: 1. Clear existing value using <code>clear()</code> 2. Set new value using <code>send_keys()</code> 3. Return component for further operations</p>"},{"location":"api/date-utils/#error-handling","title":"Error Handling","text":"<p>Comprehensive error handling for date component interactions: - Element not found exceptions - Timeout exceptions for dynamic loading - Value setting validation</p>"},{"location":"api/date-utils/#troubleshooting","title":"Troubleshooting","text":""},{"location":"api/date-utils/#common-issues","title":"Common Issues","text":"<p>Date Component Not Found: <pre><code>Exception: Could not find clickable date component with label 'Start Date'\n</code></pre> Solutions: - Verify exact label text (check for colons, asterisks, spacing) - Ensure date component is visible and not disabled - Check if component is inside collapsed sections or tabs - Wait for any dynamic content to load</p> <p>Invalid Date Format: <pre><code>Date not accepted or field shows error\n</code></pre> Solutions: - Check application's expected date format - Try different format variations - Verify locale settings in Appian application - Check field validation rules</p> <p>Date Picker Not Opening: <pre><code>Date picker interface doesn't appear after click\n</code></pre> Solutions: - Verify element is clickable and not disabled - Check if date picker is already open - Ensure no JavaScript errors are preventing interaction - Try clicking on the calendar icon if present</p>"},{"location":"api/date-utils/#debugging-tips","title":"Debugging Tips","text":"<ol> <li> <p>Inspect Date Field Structure:    <pre><code>&lt;div&gt;\n  &lt;div&gt;\n    &lt;label&gt;Start Date&lt;/label&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;div&gt;\n      &lt;div&gt;\n        &lt;input type=\"text\" placeholder=\"MM/DD/YYYY\"&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre></p> </li> <li> <p>Check Date Format Requirements:</p> </li> <li>Look for placeholder text indicating expected format</li> <li>Check field validation messages</li> <li> <p>Test with known valid dates first</p> </li> <li> <p>Verify Component State:</p> </li> <li>Ensure field is enabled and editable</li> <li>Check if field has focus after clicking</li> <li>Verify no JavaScript validation prevents input</li> </ol>"},{"location":"api/date-utils/#integration-examples","title":"Integration Examples","text":""},{"location":"api/date-utils/#with-pytest-and-date-validation","title":"With pytest and Date Validation","text":"<pre><code>import pytest\nfrom datetime import datetime, timedelta\nfrom selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom robo_appian.components.DateUtils import DateUtils\n\nclass TestDateInputs:\n    def setup_method(self):\n        self.driver = webdriver.Chrome()\n        self.wait = WebDriverWait(self.driver, 10)\n\n    def teardown_method(self):\n        self.driver.quit()\n\n    def test_future_date_selection(self):\n        self.driver.get(\"https://your-appian-app.com\")\n\n        # Calculate future date\n        future_date = datetime.now() + timedelta(days=30)\n        date_string = future_date.strftime(\"%m/%d/%Y\")\n\n        # Set future date\n        DateUtils.setValueByLabelText(self.wait, \"Appointment Date\", date_string)\n\n        # Verify date was set\n        date_component = self.driver.find_element(By.XPATH, \n            './/div[./div/label[text()=\"Appointment Date\"]]/div/div/div/input')\n        assert date_string in date_component.get_attribute(\"value\")\n</code></pre>"},{"location":"api/date-utils/#with-page-object-model","title":"With Page Object Model","text":"<pre><code>class EventRegistrationPage:\n    def __init__(self, driver):\n        self.driver = driver\n        self.wait = WebDriverWait(driver, 10)\n\n    def schedule_event(self, event_name, start_date, end_date, start_time):\n        InputUtils.setValueByLabelText(self.wait, \"Event Name\", event_name)\n        DateUtils.setValueByLabelText(self.wait, \"Start Date\", start_date)\n        DateUtils.setValueByLabelText(self.wait, \"End Date\", end_date)\n        DateUtils.setValueByLabelText(self.wait, \"Start Time\", start_time)\n\n    def set_registration_deadline(self, deadline_date):\n        DateUtils.setValueByLabelText(self.wait, \"Registration Deadline\", deadline_date)\n</code></pre>"},{"location":"api/date-utils/#with-date-utility-functions","title":"With Date Utility Functions","text":"<pre><code>from datetime import datetime, timedelta\n\nclass DateHelper:\n    @staticmethod\n    def format_date_for_appian(date_obj, format_type=\"US\"):\n        \"\"\"Convert datetime object to Appian-compatible string\"\"\"\n        if format_type == \"US\":\n            return date_obj.strftime(\"%m/%d/%Y\")\n        elif format_type == \"EU\":\n            return date_obj.strftime(\"%d/%m/%Y\")\n        elif format_type == \"ISO\":\n            return date_obj.strftime(\"%Y-%m-%d\")\n\n    @staticmethod\n    def get_business_days_from_now(days):\n        \"\"\"Calculate business days from current date\"\"\"\n        current = datetime.now()\n        business_days = 0\n        while business_days &lt; days:\n            current += timedelta(days=1)\n            if current.weekday() &lt; 5:  # Monday = 0, Friday = 4\n                business_days += 1\n        return current\n\n# Usage with DateUtils\nfuture_business_date = DateHelper.get_business_days_from_now(10)\nformatted_date = DateHelper.format_date_for_appian(future_business_date, \"US\")\nDateUtils.setValueByLabelText(wait, \"Due Date\", formatted_date)\n</code></pre>"},{"location":"api/date-utils/#related-components","title":"Related Components","text":"<ul> <li>InputUtils - For general input field interactions</li> <li>ButtonUtils - For form submission after date entry</li> <li>DropdownUtils - For date-related dropdown selections</li> <li>ComponentDriver - For universal component interactions</li> </ul> <p>DateUtils provides specialized date handling capabilities for Appian applications, managing the complexity of date format requirements and date picker interactions while maintaining reliability and ease of use.</p>"},{"location":"api/dropdown-utils/","title":"DropdownUtils","text":"<p>The <code>DropdownUtils</code> class provides comprehensive methods for interacting with dropdown and combobox components in Appian applications. It handles the complex interactions required for Appian's dynamic dropdown elements, providing reliable selection and validation capabilities.</p>"},{"location":"api/dropdown-utils/#overview","title":"Overview","text":"<p>DropdownUtils is designed to handle Appian's sophisticated dropdown structures, providing reliable methods to:</p> <ul> <li>Select dropdown values by visible label text</li> <li>Select values using partial label matching  </li> <li>Check if dropdown options exist</li> <li>Verify dropdown read-only status</li> <li>Handle combobox components directly</li> <li>Manage dynamic dropdown loading and selection</li> </ul>"},{"location":"api/dropdown-utils/#class-methods","title":"Class Methods","text":""},{"location":"api/dropdown-utils/#selectdropdownvaluebylabeltext","title":"selectDropdownValueByLabelText()","text":"<p>Selects a value from a dropdown by its exact visible label text.</p> <p>Parameters: - <code>wait</code> (WebDriverWait): Selenium WebDriverWait instance for element waiting - <code>dropdown_label</code> (str): The exact visible text label of the dropdown - <code>value</code> (str): The value/option to select from the dropdown</p> <p>Usage Example: <pre><code>from selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom robo_appian.components.DropdownUtils import DropdownUtils\n\ndriver = webdriver.Chrome()\nwait = WebDriverWait(driver, 10)\n\n# Select status from dropdown\nDropdownUtils.selectDropdownValueByLabelText(wait, \"Status\", \"Approved\")\n\n# Select department\nDropdownUtils.selectDropdownValueByLabelText(wait, \"Department\", \"Engineering\")\n\n# Select priority\nDropdownUtils.selectDropdownValueByLabelText(wait, \"Priority\", \"High\")\n</code></pre></p>"},{"location":"api/dropdown-utils/#selectdropdownvaluebypartiallabeltext","title":"selectDropdownValueByPartialLabelText()","text":"<p>Selects a value from a dropdown using partial label text matching.</p> <p>Parameters: - <code>wait</code> (WebDriverWait): Selenium WebDriverWait instance for element waiting - <code>dropdown_label</code> (str): Partial text that appears in the dropdown label - <code>value</code> (str): The value/option to select from the dropdown</p> <p>Usage Example: <pre><code># If label is \"Customer Status (Required)\"\nDropdownUtils.selectDropdownValueByPartialLabelText(wait, \"Customer Status\", \"Active\")\n\n# If label is \"Employee Department (Optional)\"\nDropdownUtils.selectDropdownValueByPartialLabelText(wait, \"Department\", \"HR\")\n</code></pre></p>"},{"location":"api/dropdown-utils/#checkdropdownoptionvalueexists","title":"checkDropdownOptionValueExists()","text":"<p>Checks if a specific value exists in a dropdown's options.</p> <p>Parameters: - <code>wait</code> (WebDriverWait): Selenium WebDriverWait instance for element waiting - <code>dropdown_label</code> (str): The label of the dropdown to check - <code>value</code> (str): The value to look for in the dropdown options</p> <p>Returns: - <code>bool</code>: True if the value exists, False otherwise</p> <p>Usage Example: <pre><code># Check if option exists before selecting\nif DropdownUtils.checkDropdownOptionValueExists(wait, \"Status\", \"Pending\"):\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"Status\", \"Pending\")\n    print(\"Status set to Pending\")\nelse:\n    print(\"Pending status not available\")\n\n# Conditional logic based on available options\navailable_statuses = [\"Active\", \"Inactive\", \"Suspended\"]\nfor status in available_statuses:\n    if DropdownUtils.checkDropdownOptionValueExists(wait, \"Status\", status):\n        DropdownUtils.selectDropdownValueByLabelText(wait, \"Status\", status)\n        break\n</code></pre></p>"},{"location":"api/dropdown-utils/#checkreadonlystatusbylabeltext","title":"checkReadOnlyStatusByLabelText()","text":"<p>Checks if a dropdown is in read-only mode.</p> <p>Parameters: - <code>wait</code> (WebDriverWait): Selenium WebDriverWait instance for element waiting - <code>label</code> (str): The label of the dropdown to check</p> <p>Returns: - <code>bool</code>: True if the dropdown is read-only, False if it's editable</p> <p>Usage Example: <pre><code># Check if dropdown is editable before trying to select\nif not DropdownUtils.checkReadOnlyStatusByLabelText(wait, \"Status\"):\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"Status\", \"Approved\")\nelse:\n    print(\"Status dropdown is read-only\")\n</code></pre></p>"},{"location":"api/dropdown-utils/#selectdropdownvaluebycomboboxcomponent","title":"selectDropdownValueByComboboxComponent()","text":"<p>Selects a value from a dropdown using a direct combobox WebElement reference.</p> <p>Parameters: - <code>wait</code> (WebDriverWait): Selenium WebDriverWait instance for element waiting - <code>combobox</code> (WebElement): The combobox WebElement to interact with - <code>value</code> (str): The value to select from the dropdown</p> <p>Usage Example: <pre><code>from selenium.webdriver.common.by import By\n\n# Find combobox directly and select value\ncombobox = driver.find_element(By.ID, \"combobox_id\")\nDropdownUtils.selectDropdownValueByComboboxComponent(wait, combobox, \"Option Value\")\n</code></pre></p>"},{"location":"api/dropdown-utils/#best-practices","title":"Best Practices","text":""},{"location":"api/dropdown-utils/#label-based-selection","title":"Label-Based Selection","text":"<p>Prefer exact label matching for reliability: <pre><code># \u2705 Recommended - exact match\nDropdownUtils.selectDropdownValueByLabelText(wait, \"Employee Status\", \"Active\")\n\n# \u26a0\ufe0f Use carefully - partial match\nDropdownUtils.selectDropdownValueByPartialLabelText(wait, \"Status\", \"Active\")\n</code></pre></p>"},{"location":"api/dropdown-utils/#validation-before-selection","title":"Validation Before Selection","text":"<p>Check option availability before selection: <pre><code># Robust selection with validation\ndropdown_label = \"Priority\"\ndesired_value = \"High\"\n\nif DropdownUtils.checkDropdownOptionValueExists(wait, dropdown_label, desired_value):\n    DropdownUtils.selectDropdownValueByLabelText(wait, dropdown_label, desired_value)\n    print(f\"Selected {desired_value}\")\nelse:\n    print(f\"{desired_value} not available in {dropdown_label}\")\n</code></pre></p>"},{"location":"api/dropdown-utils/#handle-read-only-dropdowns","title":"Handle Read-Only Dropdowns","text":"<p>Verify dropdown state before interaction: <pre><code>def safe_dropdown_selection(wait, label, value):\n    if DropdownUtils.checkReadOnlyStatusByLabelText(wait, label):\n        print(f\"Dropdown '{label}' is read-only, skipping selection\")\n        return False\n\n    if DropdownUtils.checkDropdownOptionValueExists(wait, label, value):\n        DropdownUtils.selectDropdownValueByLabelText(wait, label, value)\n        return True\n    else:\n        print(f\"Value '{value}' not found in dropdown '{label}'\")\n        return False\n</code></pre></p>"},{"location":"api/dropdown-utils/#error-handling","title":"Error Handling","text":"<p>Always wrap dropdown interactions in try-catch blocks: <pre><code>try:\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"Status\", \"Approved\")\n    print(\"Dropdown selection successful\")\nexcept Exception as e:\n    print(f\"Failed to select dropdown value: {e}\")\n</code></pre></p>"},{"location":"api/dropdown-utils/#common-use-cases","title":"Common Use Cases","text":""},{"location":"api/dropdown-utils/#form-data-entry","title":"Form Data Entry","text":"<pre><code># Fill out application form\nDropdownUtils.selectDropdownValueByLabelText(wait, \"Country\", \"United States\")\nDropdownUtils.selectDropdownValueByLabelText(wait, \"State\", \"California\")\nDropdownUtils.selectDropdownValueByLabelText(wait, \"City\", \"San Francisco\")\nDropdownUtils.selectDropdownValueByLabelText(wait, \"Employment Type\", \"Full-time\")\n</code></pre>"},{"location":"api/dropdown-utils/#filter-and-search","title":"Filter and Search","text":"<pre><code># Set search filters\nDropdownUtils.selectDropdownValueByLabelText(wait, \"Department\", \"Engineering\")\nDropdownUtils.selectDropdownValueByLabelText(wait, \"Status\", \"Active\")\nDropdownUtils.selectDropdownValueByLabelText(wait, \"Date Range\", \"Last 30 Days\")\nButtonUtils.clickByLabelText(wait, \"Apply Filters\")\n</code></pre>"},{"location":"api/dropdown-utils/#configuration-settings","title":"Configuration Settings","text":"<pre><code># Configure application settings\nDropdownUtils.selectDropdownValueByLabelText(wait, \"Time Zone\", \"Pacific Standard Time\")\nDropdownUtils.selectDropdownValueByLabelText(wait, \"Language\", \"English\")\nDropdownUtils.selectDropdownValueByLabelText(wait, \"Theme\", \"Dark Mode\")\n</code></pre>"},{"location":"api/dropdown-utils/#conditional-selections","title":"Conditional Selections","text":"<pre><code># Dynamic selection based on available options\npriority_options = [\"Critical\", \"High\", \"Medium\", \"Low\"]\nfor priority in priority_options:\n    if DropdownUtils.checkDropdownOptionValueExists(wait, \"Priority\", priority):\n        DropdownUtils.selectDropdownValueByLabelText(wait, \"Priority\", priority)\n        print(f\"Priority set to: {priority}\")\n        break\n</code></pre>"},{"location":"api/dropdown-utils/#technical-details","title":"Technical Details","text":""},{"location":"api/dropdown-utils/#dropdown-interaction-flow","title":"Dropdown Interaction Flow","text":"<ol> <li>Find Combobox: Locate the dropdown combobox by label</li> <li>Click to Open: Click the combobox to open dropdown options</li> <li>Get Options ID: Extract the <code>aria-controls</code> attribute for option list ID</li> <li>Locate Option: Find the specific option by value text</li> <li>Select Option: Click the desired option</li> </ol>"},{"location":"api/dropdown-utils/#xpath-strategies","title":"XPath Strategies","text":"<p>Exact Label Combobox: <pre><code>.//div[./div/span[normalize-space(text())=\"{label}\"]]/div/div/div/div[@role=\"combobox\" and not(@aria-disabled=\"true\")]\n</code></pre></p> <p>Partial Label Combobox: <pre><code>.//div[./div/span[contains(normalize-space(text()), \"{label}\")]]/div/div/div/div[@role=\"combobox\" and not(@aria-disabled=\"true\")]\n</code></pre></p> <p>Option Selection: <pre><code>.//div/ul[@id=\"{dropdown_option_id}\"]/li[./div[normalize-space(text())=\"{value}\"]]\n</code></pre></p>"},{"location":"api/dropdown-utils/#aria-attributes","title":"ARIA Attributes","text":"<p>DropdownUtils leverages ARIA attributes for reliable interaction: - <code>role=\"combobox\"</code> - Identifies dropdown components - <code>aria-controls</code> - Links combobox to its option list - <code>aria-disabled</code> - Checks if dropdown is disabled</p>"},{"location":"api/dropdown-utils/#troubleshooting","title":"Troubleshooting","text":""},{"location":"api/dropdown-utils/#common-issues","title":"Common Issues","text":"<p>Dropdown Not Found: <pre><code>Exception: Could not find combobox with label \"Status\"\n</code></pre> Solutions: - Verify exact label text (check for punctuation, spaces) - Ensure dropdown is visible and not inside collapsed sections - Check if dropdown is dynamically loaded - Use partial label matching if label has dynamic content</p> <p>Option Not Available: <pre><code>Exception: Could not find dropdown option \"Approved\" with dropdown option id \"dropdown_123\"\n</code></pre> Solutions: - Verify the exact option text - Check if options are loaded dynamically - Use <code>checkDropdownOptionValueExists()</code> to validate before selection - Ensure dropdown is fully expanded before selection</p> <p>Dropdown is Read-Only: - Use <code>checkReadOnlyStatusByLabelText()</code> to verify state - Check if user has permissions to modify the field - Verify if dropdown becomes editable after other form interactions</p>"},{"location":"api/dropdown-utils/#debugging-tips","title":"Debugging Tips","text":"<ol> <li> <p>Inspect Dropdown Structure:    <pre><code>&lt;div&gt;\n  &lt;div&gt;&lt;span&gt;Status&lt;/span&gt;&lt;/div&gt;\n  &lt;div role=\"combobox\" aria-controls=\"options_123\"&gt;\n    &lt;!-- Combobox content --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;ul id=\"options_123\"&gt;\n  &lt;li&gt;&lt;div&gt;Active&lt;/div&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;div&gt;Inactive&lt;/div&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre></p> </li> <li> <p>Check Option Loading:</p> </li> <li>Some dropdowns load options dynamically</li> <li>Wait for options to be fully loaded before selection</li> <li> <p>Use explicit waits if needed</p> </li> <li> <p>Verify Dropdown State:</p> </li> <li>Check if dropdown is enabled/disabled</li> <li>Verify if dropdown is visible in current view</li> <li>Ensure no overlays are blocking interaction</li> </ol>"},{"location":"api/dropdown-utils/#integration-examples","title":"Integration Examples","text":""},{"location":"api/dropdown-utils/#with-pytest-and-parameterization","title":"With pytest and Parameterization","text":"<pre><code>import pytest\nfrom selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom robo_appian.components.DropdownUtils import DropdownUtils\n\nclass TestDropdownSelections:\n    def setup_method(self):\n        self.driver = webdriver.Chrome()\n        self.wait = WebDriverWait(self.driver, 10)\n\n    def teardown_method(self):\n        self.driver.quit()\n\n    @pytest.mark.parametrize(\"dropdown,value\", [\n        (\"Status\", \"Active\"),\n        (\"Department\", \"Engineering\"),\n        (\"Priority\", \"High\"),\n    ])\n    def test_dropdown_selections(self, dropdown, value):\n        self.driver.get(\"https://your-appian-app.com\")\n\n        # Validate option exists before selection\n        assert DropdownUtils.checkDropdownOptionValueExists(\n            self.wait, dropdown, value\n        ), f\"Option '{value}' not found in '{dropdown}' dropdown\"\n\n        # Select the value\n        DropdownUtils.selectDropdownValueByLabelText(self.wait, dropdown, value)\n</code></pre>"},{"location":"api/dropdown-utils/#with-page-object-model","title":"With Page Object Model","text":"<pre><code>class EmployeeFormPage:\n    def __init__(self, driver):\n        self.driver = driver\n        self.wait = WebDriverWait(driver, 10)\n\n    def set_employee_details(self, department, status, employment_type):\n        # Set department if dropdown is editable\n        if not DropdownUtils.checkReadOnlyStatusByLabelText(self.wait, \"Department\"):\n            DropdownUtils.selectDropdownValueByLabelText(self.wait, \"Department\", department)\n\n        # Set status with validation\n        if DropdownUtils.checkDropdownOptionValueExists(self.wait, \"Status\", status):\n            DropdownUtils.selectDropdownValueByLabelText(self.wait, \"Status\", status)\n\n        # Set employment type\n        DropdownUtils.selectDropdownValueByLabelText(self.wait, \"Employment Type\", employment_type)\n\n    def get_available_departments(self):\n        # Custom method to extract all available options\n        # Implementation would depend on specific requirements\n        pass\n</code></pre>"},{"location":"api/dropdown-utils/#with-data-driven-configuration","title":"With Data-Driven Configuration","text":"<pre><code>import yaml\nfrom robo_appian.components.DropdownUtils import DropdownUtils\n\n# Load form configuration\nwith open('form_config.yaml') as f:\n    config = yaml.safe_load(f)\n\n# Fill dropdowns from configuration\nfor dropdown_config in config['dropdowns']:\n    label = dropdown_config['label']\n    value = dropdown_config['value']\n    required = dropdown_config.get('required', False)\n\n    if DropdownUtils.checkDropdownOptionValueExists(wait, label, value):\n        DropdownUtils.selectDropdownValueByLabelText(wait, label, value)\n    elif required:\n        raise Exception(f\"Required dropdown option '{value}' not found in '{label}'\")\n</code></pre>"},{"location":"api/dropdown-utils/#related-components","title":"Related Components","text":"<ul> <li>InputUtils - For text input field interactions</li> <li>ButtonUtils - For form submission after dropdown selection</li> <li>SearchDropdownUtils - For searchable dropdown components</li> <li>ComponentDriver - For universal component interactions</li> </ul> <p>DropdownUtils provides robust dropdown interaction capabilities for Appian applications, handling the complexity of dynamic option loading and selection while maintaining reliability and ease of use.</p>"},{"location":"api/input-utils/","title":"InputUtils","text":"<p>The <code>InputUtils</code> class provides comprehensive methods for interacting with input components in Appian applications. It handles text fields, text areas, and other input elements, making it easy to set values using visible labels or HTML attributes.</p>"},{"location":"api/input-utils/#overview","title":"Overview","text":"<p>InputUtils is designed to handle Appian's complex input field structures, providing reliable methods to:</p> <ul> <li>Set values in input fields by their visible label text</li> <li>Set values using partial label matching</li> <li>Set values by HTML ID</li> <li>Handle various input types (text, password, email, etc.)</li> <li>Manage Appian's dynamic form components</li> </ul>"},{"location":"api/input-utils/#class-methods","title":"Class Methods","text":""},{"location":"api/input-utils/#setvaluebylabeltext","title":"setValueByLabelText()","text":"<p>Sets a value in an input component by its exact visible label text.</p> <p>Signature: <pre><code>@staticmethod\ndef setValueByLabelText(wait: WebDriverWait, label: str, value: str) -&gt; None\n</code></pre></p> <p>Parameters: - <code>wait</code> (WebDriverWait): Selenium WebDriverWait instance for element waiting - <code>label</code> (str): The exact visible text label of the input component - <code>value</code> (str): The value to set in the input field</p> <p>Usage Example: <pre><code>from selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom robo_appian.components.InputUtils import InputUtils\n\ndriver = webdriver.Chrome()\nwait = WebDriverWait(driver, 10)\n\n# Set username\nInputUtils.setValueByLabelText(wait, \"Username\", \"john_doe\")\n\n# Set email\nInputUtils.setValueByLabelText(wait, \"Email Address\", \"john@example.com\")\n\n# Set password\nInputUtils.setValueByLabelText(wait, \"Password\", \"secure_password123\")\n</code></pre></p>"},{"location":"api/input-utils/#setvaluebypartiallabeltext","title":"setValueByPartialLabelText()","text":"<p>Sets a value in an input component using partial label text matching.</p> <p>Signature: <pre><code>@staticmethod\ndef setValueByPartialLabelText(wait: WebDriverWait, label: str, value: str) -&gt; None\n</code></pre></p> <p>Parameters: - <code>wait</code> (WebDriverWait): Selenium WebDriverWait instance for element waiting - <code>label</code> (str): Partial text that appears in the label of the input component - <code>value</code> (str): The value to set in the input field</p> <p>Usage Example: <pre><code># If label is \"Customer Name (Required)\"\nInputUtils.setValueByPartialLabelText(wait, \"Customer Name\", \"John Smith\")\n\n# If label is \"Phone Number (Optional)\"\nInputUtils.setValueByPartialLabelText(wait, \"Phone\", \"+1-555-123-4567\")\n</code></pre></p> <p>Note: Use partial matching carefully to avoid ambiguous matches.</p>"},{"location":"api/input-utils/#setvaluebyid","title":"setValueById()","text":"<p>Sets a value in an input component by its HTML ID attribute.</p> <p>Signature: <pre><code>@staticmethod\ndef setValueById(wait: WebDriverWait, component_id: str, value: str) -&gt; WebElement\n</code></pre></p> <p>Parameters: - <code>wait</code> (WebDriverWait): Selenium WebDriverWait instance for element waiting - <code>component_id</code> (str): The HTML ID attribute of the input component - <code>value</code> (str): The value to set in the input field</p> <p>Returns: - <code>WebElement</code>: The input component after setting the value</p> <p>Usage Example: <pre><code># Set value by ID\ncomponent = InputUtils.setValueById(wait, \"username_input\", \"john_doe\")\n\n# Chain operations if needed\nInputUtils.setValueById(wait, \"email_field\", \"john@example.com\")\n</code></pre></p>"},{"location":"api/input-utils/#best-practices","title":"Best Practices","text":""},{"location":"api/input-utils/#label-based-vs-id-based-selection","title":"Label-Based vs ID-Based Selection","text":"<p>Prefer label-based selection for maintainability: <pre><code># \u2705 Recommended - readable and maintainable\nInputUtils.setValueByLabelText(wait, \"Customer Name\", \"John Smith\")\n\n# \u274c Less preferred - brittle and technical\nInputUtils.setValueById(wait, \"cust_nm_fld_v2\", \"John Smith\")\n</code></pre></p>"},{"location":"api/input-utils/#handle-special-characters","title":"Handle Special Characters","text":"<p>Appian input fields can handle various data types: <pre><code># Text with special characters\nInputUtils.setValueByLabelText(wait, \"Description\", \"Special chars: @#$%^&amp;*()\")\n\n# Numeric values (as strings)\nInputUtils.setValueByLabelText(wait, \"Amount\", \"1234.56\")\n\n# Dates (format depends on field configuration)\nInputUtils.setValueByLabelText(wait, \"Start Date\", \"01/15/2024\")\n</code></pre></p>"},{"location":"api/input-utils/#clear-and-set-pattern","title":"Clear and Set Pattern","text":"<p>InputUtils automatically clears fields before setting new values: <pre><code># This will clear existing content and set new value\nInputUtils.setValueByLabelText(wait, \"Notes\", \"New content\")\n</code></pre></p>"},{"location":"api/input-utils/#error-handling","title":"Error Handling","text":"<p>Always handle potential exceptions: <pre><code>try:\n    InputUtils.setValueByLabelText(wait, \"Username\", \"john_doe\")\n    print(\"Value set successfully\")\nexcept Exception as e:\n    print(f\"Failed to set input value: {e}\")\n</code></pre></p>"},{"location":"api/input-utils/#common-use-cases","title":"Common Use Cases","text":""},{"location":"api/input-utils/#user-registration-form","title":"User Registration Form","text":"<pre><code># Fill out registration form\nInputUtils.setValueByLabelText(wait, \"First Name\", \"John\")\nInputUtils.setValueByLabelText(wait, \"Last Name\", \"Doe\")\nInputUtils.setValueByLabelText(wait, \"Email\", \"john.doe@example.com\")\nInputUtils.setValueByLabelText(wait, \"Phone\", \"+1-555-123-4567\")\nInputUtils.setValueByLabelText(wait, \"Password\", \"SecurePass123!\")\nInputUtils.setValueByLabelText(wait, \"Confirm Password\", \"SecurePass123!\")\n</code></pre>"},{"location":"api/input-utils/#search-forms","title":"Search Forms","text":"<pre><code># Search functionality\nInputUtils.setValueByLabelText(wait, \"Search Terms\", \"quarterly report\")\nInputUtils.setValueByPartialLabelText(wait, \"Category\", \"Finance\")\nButtonUtils.clickByLabelText(wait, \"Search\")\n</code></pre>"},{"location":"api/input-utils/#data-entry-forms","title":"Data Entry Forms","text":"<pre><code># Employee information\nInputUtils.setValueByLabelText(wait, \"Employee ID\", \"EMP001\")\nInputUtils.setValueByLabelText(wait, \"Department\", \"Engineering\")\nInputUtils.setValueByLabelText(wait, \"Start Date\", \"01/15/2024\")\nInputUtils.setValueByLabelText(wait, \"Salary\", \"75000\")\n</code></pre>"},{"location":"api/input-utils/#profile-updates","title":"Profile Updates","text":"<pre><code># Update user profile\nInputUtils.setValueByLabelText(wait, \"Bio\", \"Software engineer with 5+ years experience\")\nInputUtils.setValueByLabelText(wait, \"Skills\", \"Python, Selenium, Test Automation\")\nInputUtils.setValueByLabelText(wait, \"Location\", \"San Francisco, CA\")\n</code></pre>"},{"location":"api/input-utils/#technical-details","title":"Technical Details","text":""},{"location":"api/input-utils/#label-to-input-mapping","title":"Label-to-Input Mapping","text":"<p>InputUtils uses sophisticated logic to map labels to inputs:</p> <ol> <li>Find Label Elements: Locates <code>&lt;label&gt;</code> elements by text</li> <li>Extract <code>for</code> Attribute: Gets the target input ID from label's <code>for</code> attribute</li> <li>Locate Input Element: Finds the input element by the extracted ID</li> <li>Ensure Clickable: Waits for the input to be in a clickable state</li> </ol>"},{"location":"api/input-utils/#xpath-strategies","title":"XPath Strategies","text":"<p>Exact Label Match: <pre><code>.//div/label[normalize-space(text())=\"{label}\"]\n</code></pre></p> <p>Partial Label Match: <pre><code>.//div/label[contains(normalize-space(text()), \"{label}\")]\n</code></pre></p>"},{"location":"api/input-utils/#input-value-setting","title":"Input Value Setting","text":"<p>The <code>_setValueByComponent()</code> method: 1. Clears existing content using <code>clear()</code> 2. Sets new value using <code>send_keys()</code> 3. Handles various input types automatically</p>"},{"location":"api/input-utils/#troubleshooting","title":"Troubleshooting","text":""},{"location":"api/input-utils/#common-issues","title":"Common Issues","text":"<p>Input Field Not Found: <pre><code>Exception: Could not find clickable input component with id 'field_id'\n</code></pre> Solutions: - Verify the exact label text (check spacing and punctuation) - Ensure the input field is visible and enabled - Check if the input is inside a collapsed section or tab - Wait for any dynamic loading to complete</p> <p>Label Missing <code>for</code> Attribute: <pre><code>ValueError: Input component with label 'Field Name' does not have 'for' attribute\n</code></pre> Solutions: - Use <code>setValueById()</code> if you know the input ID - Inspect the HTML to understand the label-input relationship - Contact developers to ensure proper label associations</p>"},{"location":"api/input-utils/#debugging-tips","title":"Debugging Tips","text":"<ol> <li> <p>Inspect Label-Input Association:    <pre><code>&lt;label for=\"input_123\"&gt;Username&lt;/label&gt;\n&lt;input id=\"input_123\" type=\"text\" /&gt;\n</code></pre></p> </li> <li> <p>Check Input State:</p> </li> <li>Verify input is visible and enabled</li> <li>Ensure no validation errors prevent input</li> <li> <p>Check if input accepts the data type you're providing</p> </li> <li> <p>Verify Exact Label Text:    <pre><code># Check for exact match - these are different:\n\"Username\"\n\"Username:\"\n\"Username (Required)\"\n\" Username \"  # Leading/trailing spaces\n</code></pre></p> </li> </ol>"},{"location":"api/input-utils/#integration-examples","title":"Integration Examples","text":""},{"location":"api/input-utils/#with-pytest-and-data-driven-tests","title":"With pytest and Data-Driven Tests","text":"<pre><code>import pytest\nfrom selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom robo_appian.components.InputUtils import InputUtils\n\nclass TestFormInputs:\n    def setup_method(self):\n        self.driver = webdriver.Chrome()\n        self.wait = WebDriverWait(self.driver, 10)\n\n    def teardown_method(self):\n        self.driver.quit()\n\n    @pytest.mark.parametrize(\"field,value\", [\n        (\"Username\", \"testuser\"),\n        (\"Email\", \"test@example.com\"),\n        (\"Phone\", \"555-1234\"),\n    ])\n    def test_input_fields(self, field, value):\n        self.driver.get(\"https://your-appian-app.com\")\n        InputUtils.setValueByLabelText(self.wait, field, value)\n        # Add verification logic\n</code></pre>"},{"location":"api/input-utils/#with-page-object-model","title":"With Page Object Model","text":"<pre><code>class UserProfilePage:\n    def __init__(self, driver):\n        self.driver = driver\n        self.wait = WebDriverWait(driver, 10)\n\n    def update_basic_info(self, first_name, last_name, email):\n        InputUtils.setValueByLabelText(self.wait, \"First Name\", first_name)\n        InputUtils.setValueByLabelText(self.wait, \"Last Name\", last_name)\n        InputUtils.setValueByLabelText(self.wait, \"Email\", email)\n\n    def set_contact_info(self, phone, address):\n        InputUtils.setValueByLabelText(self.wait, \"Phone\", phone)\n        InputUtils.setValueByLabelText(self.wait, \"Address\", address)\n</code></pre>"},{"location":"api/input-utils/#with-configuration-driven-tests","title":"With Configuration-Driven Tests","text":"<pre><code>import json\nfrom robo_appian.components.InputUtils import InputUtils\n\n# Load test data from JSON\nwith open('test_data.json') as f:\n    test_data = json.load(f)\n\n# Fill form from configuration\nfor field_name, field_value in test_data['form_fields'].items():\n    InputUtils.setValueByLabelText(wait, field_name, field_value)\n</code></pre>"},{"location":"api/input-utils/#related-components","title":"Related Components","text":"<ul> <li>ButtonUtils - For button interactions after input</li> <li>DropdownUtils - For dropdown field selections</li> <li>DateUtils - For specialized date input handling</li> <li>ComponentDriver - For universal component interactions</li> </ul> <p>InputUtils provides the foundation for reliable form interactions in Appian applications, handling the complexity of dynamic form structures while maintaining simple, readable test code.</p>"},{"location":"api/label-utils/","title":"LabelUtils API Reference","text":"<p>The <code>LabelUtils</code> class provides utility functions for interacting with label elements in Appian UIs.</p>"},{"location":"api/label-utils/#import","title":"Import","text":"<pre><code>from robo_appian.components.LabelUtils import LabelUtils\n</code></pre>"},{"location":"api/label-utils/#example-usage","title":"Example Usage","text":"<pre><code># Example: Get label text\nlabel_text = LabelUtils.get_label_text(element)\n</code></pre>"},{"location":"api/link-utils/","title":"LinkUtils API Reference","text":"<p>The <code>LinkUtils</code> class provides utility functions for interacting with link elements in Appian UIs.</p>"},{"location":"api/link-utils/#import","title":"Import","text":"<pre><code>from robo_appian.components.LinkUtils import LinkUtils\n</code></pre>"},{"location":"api/link-utils/#example-usage","title":"Example Usage","text":"<pre><code># Example: Click a link\nLinkUtils.click_link(element)\n</code></pre>"},{"location":"api/search-dropdown-utils/","title":"SearchDropdownUtils API Reference","text":"<p>The <code>SearchDropdownUtils</code> class provides utility methods for interacting with Appian's search dropdown components. These utilities help automate the process of selecting options from search-enabled dropdowns by label or partial label.</p>"},{"location":"api/search-dropdown-utils/#import","title":"Import","text":"<pre><code>from robo_appian.components.SearchDropdownUtils import SearchDropdownUtils\n</code></pre>"},{"location":"api/search-dropdown-utils/#methods","title":"Methods","text":""},{"location":"api/search-dropdown-utils/#selectsearchdropdownvaluebylabeltext","title":"selectSearchDropdownValueByLabelText","text":"<p>Selects a value from a search dropdown by matching the exact label text.</p> <p>Syntax: <pre><code>SearchDropdownUtils.selectSearchDropdownValueByLabelText(wait, dropdown_label, value)\n</code></pre> Parameters: - <code>wait</code> (WebDriverWait): Selenium WebDriverWait instance - <code>dropdown_label</code> (str): The exact visible label of the search dropdown - <code>value</code> (str): The value to select from the dropdown</p> <p>Example: <pre><code>SearchDropdownUtils.selectSearchDropdownValueByLabelText(wait, \"Status\", \"Approved\")\n</code></pre></p>"},{"location":"api/search-dropdown-utils/#selectsearchdropdownvaluebypartiallabeltext","title":"selectSearchDropdownValueByPartialLabelText","text":"<p>Selects a value from a search dropdown by matching partial label text.</p> <p>Syntax: <pre><code>SearchDropdownUtils.selectSearchDropdownValueByPartialLabelText(wait, dropdown_label, value)\n</code></pre> Parameters: - <code>wait</code> (WebDriverWait): Selenium WebDriverWait instance - <code>dropdown_label</code> (str): Partial label text of the search dropdown - <code>value</code> (str): The value to select from the dropdown</p> <p>Example: <pre><code>SearchDropdownUtils.selectSearchDropdownValueByPartialLabelText(wait, \"Stat\", \"Approved\")\n</code></pre></p>"},{"location":"api/search-dropdown-utils/#how-it-works","title":"How it Works","text":"<ul> <li>Locates the search dropdown by its label (exact or partial)</li> <li>Clicks the dropdown to activate the search input</li> <li>Enters the desired value</li> <li>Waits for the dropdown options to appear</li> <li>Selects the matching option from the dropdown</li> </ul>"},{"location":"api/search-dropdown-utils/#error-handling","title":"Error Handling","text":"<ul> <li>Raises <code>RuntimeError</code> if the dropdown or option is not found or not clickable</li> </ul>"},{"location":"api/search-dropdown-utils/#see-also","title":"See Also","text":"<ul> <li>InputUtils</li> <li>DropdownUtils</li> </ul>"},{"location":"api/search-input-utils/","title":"SearchInputUtils","text":"<p>The <code>SearchInputUtils</code> class provides utility methods for interacting with Appian's search input and search dropdown components. It enables automation of entering values and selecting options in search-enabled fields.</p>"},{"location":"api/search-input-utils/#overview","title":"Overview","text":"<p>SearchInputUtils is designed to: - Select values from search dropdowns by exact or partial label - Automate search input field interactions in Appian UIs - Handle dynamic dropdowns and search suggestions</p>"},{"location":"api/search-input-utils/#import","title":"Import","text":"<pre><code>from robo_appian.components.SearchInputUtils import SearchInputUtils\n</code></pre>"},{"location":"api/search-input-utils/#class-methods","title":"Class Methods","text":""},{"location":"api/search-input-utils/#selectsearchdropdownbylabeltext","title":"selectSearchDropdownByLabelText()","text":"<p>Selects a value from a search dropdown by matching the exact label text.</p> <p>Parameters: - <code>wait</code> (<code>WebDriverWait</code>): Selenium WebDriverWait instance - <code>label</code> (<code>str</code>): The exact visible label of the search input - <code>value</code> (<code>str</code>): The value to select from the dropdown</p> <p>Usage Example: <pre><code>SearchInputUtils.selectSearchDropdownByLabelText(wait, \"Country\", \"India\")\n</code></pre></p>"},{"location":"api/search-input-utils/#selectsearchdropdownbypartiallabeltext","title":"selectSearchDropdownByPartialLabelText()","text":"<p>Selects a value from a search dropdown by matching partial label text.</p> <p>Parameters: - <code>wait</code> (<code>WebDriverWait</code>): Selenium WebDriverWait instance - <code>label</code> (<code>str</code>): Partial label text of the search input - <code>value</code> (<code>str</code>): The value to select from the dropdown</p> <p>Usage Example: <pre><code>SearchInputUtils.selectSearchDropdownByPartialLabelText(wait, \"Coun\", \"India\")\n</code></pre></p>"},{"location":"api/search-input-utils/#how-it-works","title":"How It Works","text":"<ul> <li>Locates the search input field by its label (exact or partial)</li> <li>Enters the desired value</li> <li>Waits for the dropdown options to appear</li> <li>Selects the matching option from the dropdown</li> </ul>"},{"location":"api/search-input-utils/#error-handling","title":"Error Handling","text":"<ul> <li>Raises <code>TimeoutError</code> if the dropdown option is not found</li> <li>Raises <code>ValueError</code> if the search input component is not found or is misconfigured</li> </ul>"},{"location":"api/search-input-utils/#see-also","title":"See Also","text":"<ul> <li>InputUtils</li> <li>DropdownUtils</li> </ul>"},{"location":"api/tab-utils/","title":"TabUtils","text":"<p>The <code>TabUtils</code> class provides methods for interacting with tab components in Appian applications. It handles tab navigation, selection, and status checking, enabling seamless navigation through tabbed interfaces.</p>"},{"location":"api/tab-utils/#overview","title":"Overview","text":"<p>TabUtils is designed to handle Appian's tab components, providing reliable methods to:</p> <ul> <li>Find currently selected tabs by label text</li> <li>Select inactive tabs to navigate between sections</li> <li>Handle complex tab structures and hierarchies</li> <li>Manage tab state verification</li> </ul>"},{"location":"api/tab-utils/#class-methods","title":"Class Methods","text":""},{"location":"api/tab-utils/#findselectedtabbylabeltext","title":"findSelectedTabByLabelText()","text":"<p>Finds the currently selected (active) tab by its visible label text.</p> <p>Parameters: - <code>wait</code> (WebDriverWait): Selenium WebDriverWait instance for element waiting - <code>label</code> (str): The visible text label of the currently selected tab</p> <p>Returns: - <code>WebElement</code>: The currently selected tab element</p> <p>Usage Example: <pre><code>from selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom robo_appian.components.TabUtils import TabUtils\n\ndriver = webdriver.Chrome()\nwait = WebDriverWait(driver, 10)\n\n# Find the currently selected tab\ncurrent_tab = TabUtils.findSelectedTabByLabelText(wait, \"General Information\")\n\n# Verify current tab selection\ntry:\n    active_tab = TabUtils.findSelectedTabByLabelText(wait, \"Contact Details\")\n    print(\"Contact Details tab is currently active\")\nexcept:\n    print(\"Contact Details tab is not currently selected\")\n\n# Get reference to selected tab for further operations\nselected_tab = TabUtils.findSelectedTabByLabelText(wait, \"Overview\")\n</code></pre></p>"},{"location":"api/tab-utils/#selectinactivetabbylabeltext","title":"selectInactiveTabByLabelText()","text":"<p>Selects an inactive tab by its label text, making it the active tab.</p> <p>Parameters: - <code>wait</code> (WebDriverWait): Selenium WebDriverWait instance for element waiting - <code>label</code> (str): The visible text label of the tab to select</p> <p>Usage Example: <pre><code># Navigate to different tabs\nTabUtils.selectInactiveTabByLabelText(wait, \"Personal Information\")\n\n# Switch to another tab\nTabUtils.selectInactiveTabByLabelText(wait, \"Employment History\")\n\n# Navigate to settings tab\nTabUtils.selectInactiveTabByLabelText(wait, \"Account Settings\")\n\n# Go to the last tab\nTabUtils.selectInactiveTabByLabelText(wait, \"Summary\")\n</code></pre></p>"},{"location":"api/tab-utils/#best-practices","title":"Best Practices","text":""},{"location":"api/tab-utils/#tab-navigation-workflow","title":"Tab Navigation Workflow","text":"<p>Follow logical tab progression: <pre><code># Navigate through tabs in logical order\ntabs = [\"Basic Info\", \"Contact Details\", \"Employment\", \"Documents\", \"Review\"]\n\nfor tab in tabs:\n    TabUtils.selectInactiveTabByLabelText(wait, tab)\n\n    # Perform tab-specific operations\n    if tab == \"Basic Info\":\n        InputUtils.setValueByLabelText(wait, \"First Name\", \"John\")\n        InputUtils.setValueByLabelText(wait, \"Last Name\", \"Doe\")\n\n    elif tab == \"Contact Details\":\n        InputUtils.setValueByLabelText(wait, \"Email\", \"john.doe@example.com\")\n        InputUtils.setValueByLabelText(wait, \"Phone\", \"555-1234\")\n\n    # Continue with other tabs...\n</code></pre></p>"},{"location":"api/tab-utils/#verify-tab-state","title":"Verify Tab State","text":"<p>Check current tab before navigation: <pre><code>def safe_tab_navigation(wait, target_tab):\n    \"\"\"Safely navigate to a tab, checking current state first\"\"\"\n    try:\n        # Check if target tab is already selected\n        TabUtils.findSelectedTabByLabelText(wait, target_tab)\n        print(f\"Tab '{target_tab}' is already selected\")\n        return True\n    except:\n        # Tab is not selected, navigate to it\n        try:\n            TabUtils.selectInactiveTabByLabelText(wait, target_tab)\n            print(f\"Successfully navigated to tab '{target_tab}'\")\n            return True\n        except Exception as e:\n            print(f\"Failed to navigate to tab '{target_tab}': {e}\")\n            return False\n\n# Usage\nsafe_tab_navigation(wait, \"Contact Information\")\n</code></pre></p>"},{"location":"api/tab-utils/#error-handling","title":"Error Handling","text":"<p>Handle tab navigation errors gracefully: <pre><code>def navigate_to_tab_with_retry(wait, tab_name, max_retries=3):\n    \"\"\"Navigate to tab with retry logic\"\"\"\n    for attempt in range(max_retries):\n        try:\n            TabUtils.selectInactiveTabByLabelText(wait, tab_name)\n            # Verify navigation was successful\n            TabUtils.findSelectedTabByLabelText(wait, tab_name)\n            return True\n        except Exception as e:\n            print(f\"Attempt {attempt + 1} failed for tab '{tab_name}': {e}\")\n            if attempt == max_retries - 1:\n                return False\n            # Wait before retry\n            time.sleep(1)\n\n    return False\n</code></pre></p>"},{"location":"api/tab-utils/#common-use-cases","title":"Common Use Cases","text":""},{"location":"api/tab-utils/#multi-step-form-navigation","title":"Multi-Step Form Navigation","text":"<pre><code># Employee onboarding form with multiple tabs\ndef complete_employee_onboarding(wait, employee_data):\n    # Tab 1: Personal Information\n    TabUtils.selectInactiveTabByLabelText(wait, \"Personal Information\")\n    InputUtils.setValueByLabelText(wait, \"First Name\", employee_data['first_name'])\n    InputUtils.setValueByLabelText(wait, \"Last Name\", employee_data['last_name'])\n    DateUtils.setValueByLabelText(wait, \"Date of Birth\", employee_data['dob'])\n\n    # Tab 2: Contact Details\n    TabUtils.selectInactiveTabByLabelText(wait, \"Contact Details\")\n    InputUtils.setValueByLabelText(wait, \"Email\", employee_data['email'])\n    InputUtils.setValueByLabelText(wait, \"Phone\", employee_data['phone'])\n    InputUtils.setValueByLabelText(wait, \"Address\", employee_data['address'])\n\n    # Tab 3: Employment Information\n    TabUtils.selectInactiveTabByLabelText(wait, \"Employment\")\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"Department\", employee_data['department'])\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"Position\", employee_data['position'])\n    DateUtils.setValueByLabelText(wait, \"Start Date\", employee_data['start_date'])\n\n    # Tab 4: Review and Submit\n    TabUtils.selectInactiveTabByLabelText(wait, \"Review\")\n    ButtonUtils.clickByLabelText(wait, \"Submit Application\")\n\n# Usage\nemployee_info = {\n    'first_name': 'John',\n    'last_name': 'Doe',\n    'dob': '01/15/1990',\n    'email': 'john.doe@company.com',\n    'phone': '555-1234',\n    'address': '123 Main St',\n    'department': 'Engineering',\n    'position': 'Software Developer',\n    'start_date': '01/01/2024'\n}\n\ncomplete_employee_onboarding(wait, employee_info)\n</code></pre>"},{"location":"api/tab-utils/#settings-configuration","title":"Settings Configuration","text":"<pre><code># Application settings across multiple tabs\ndef configure_application_settings(wait, settings):\n    # General Settings\n    TabUtils.selectInactiveTabByLabelText(wait, \"General\")\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"Language\", settings['language'])\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"Time Zone\", settings['timezone'])\n\n    # Security Settings\n    TabUtils.selectInactiveTabByLabelText(wait, \"Security\")\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"Session Timeout\", settings['session_timeout'])\n    ButtonUtils.clickByLabelText(wait, \"Enable Two-Factor Auth\")\n\n    # Notification Settings\n    TabUtils.selectInactiveTabByLabelText(wait, \"Notifications\")\n    ButtonUtils.clickByLabelText(wait, \"Email Notifications\")\n    ButtonUtils.clickByLabelText(wait, \"SMS Notifications\")\n\n    # Save all settings\n    TabUtils.selectInactiveTabByLabelText(wait, \"Review\")\n    ButtonUtils.clickByLabelText(wait, \"Save All Settings\")\n</code></pre>"},{"location":"api/tab-utils/#data-validation-across-tabs","title":"Data Validation Across Tabs","text":"<pre><code># Validate data across multiple tabs\ndef validate_form_completion(wait, required_tabs):\n    validation_results = {}\n\n    for tab_name in required_tabs:\n        try:\n            # Navigate to tab\n            TabUtils.selectInactiveTabByLabelText(wait, tab_name)\n\n            # Check for validation errors or required fields\n            error_elements = wait.driver.find_elements(By.CLASS_NAME, \"validation-error\")\n            required_elements = wait.driver.find_elements(By.XPATH, \"//*[@required and @value='']\")\n\n            validation_results[tab_name] = {\n                'errors': len(error_elements),\n                'missing_required': len(required_elements),\n                'valid': len(error_elements) == 0 and len(required_elements) == 0\n            }\n\n        except Exception as e:\n            validation_results[tab_name] = {\n                'error': str(e),\n                'valid': False\n            }\n\n    return validation_results\n\n# Usage\ntabs_to_validate = [\"Personal Info\", \"Contact\", \"Employment\", \"Documents\"]\nresults = validate_form_completion(wait, tabs_to_validate)\n\nfor tab, result in results.items():\n    if result.get('valid', False):\n        print(f\"\u2705 {tab}: Valid\")\n    else:\n        print(f\"\u274c {tab}: Issues found - {result}\")\n</code></pre>"},{"location":"api/tab-utils/#tab-based-workflow","title":"Tab-Based Workflow","text":"<pre><code># Document review workflow\ndef document_review_workflow(wait, document_id):\n    # Step 1: Open document\n    TabUtils.selectInactiveTabByLabelText(wait, \"Document Details\")\n    InputUtils.setValueByLabelText(wait, \"Document ID\", document_id)\n    ButtonUtils.clickByLabelText(wait, \"Load Document\")\n\n    # Step 2: Review content\n    TabUtils.selectInactiveTabByLabelText(wait, \"Content Review\")\n    # Perform content review operations\n    ButtonUtils.clickByLabelText(wait, \"Mark as Reviewed\")\n\n    # Step 3: Approval\n    TabUtils.selectInactiveTabByLabelText(wait, \"Approval\")\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"Status\", \"Approved\")\n    InputUtils.setValueByLabelText(wait, \"Comments\", \"Document approved for publication\")\n\n    # Step 4: Final submission\n    TabUtils.selectInactiveTabByLabelText(wait, \"Submit\")\n    ButtonUtils.clickByLabelText(wait, \"Final Submit\")\n</code></pre>"},{"location":"api/tab-utils/#technical-details","title":"Technical Details","text":""},{"location":"api/tab-utils/#tab-element-structure","title":"Tab Element Structure","text":"<p>TabUtils expects Appian tabs with this structure:</p> <p>Selected Tab: <pre><code>&lt;div&gt;\n  &lt;div&gt;\n    &lt;div&gt;\n      &lt;div&gt;\n        &lt;div&gt;\n          &lt;div&gt;\n            &lt;div&gt;\n              &lt;p&gt;\n                &lt;strong&gt;Tab Label&lt;/strong&gt;\n              &lt;/p&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;span&gt;Selected Tab.&lt;/span&gt;\n&lt;/div&gt;\n</code></pre></p> <p>Inactive Tab: <pre><code>&lt;div role=\"link\"&gt;\n  &lt;div&gt;\n    &lt;div&gt;\n      &lt;div&gt;\n        &lt;div&gt;\n          &lt;div&gt;\n            &lt;p&gt;\n              &lt;span&gt;Tab Label&lt;/span&gt;\n            &lt;/p&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre></p>"},{"location":"api/tab-utils/#xpath-strategies","title":"XPath Strategies","text":"<p>Selected Tab Detection: <pre><code>.//div[./div[./div/div/div/div/div/p/strong[normalize-space(text())='{label}']]/span[text()='Selected Tab.']]/div[@role='link']\n</code></pre></p> <p>Inactive Tab Selection: <pre><code>.//div[@role='link']/div/div/div/div/div[./p/span[text()='{label}']]\n</code></pre></p>"},{"location":"api/tab-utils/#navigation-logic","title":"Navigation Logic","text":"<ol> <li>Current Tab Detection: Checks for <code>&lt;strong&gt;</code> element and \"Selected Tab.\" indicator</li> <li>Inactive Tab Selection: Looks for <code>role=\"link\"</code> with <code>&lt;span&gt;</code> containing label text</li> <li>Click Action: Performs click on the clickable tab element</li> </ol>"},{"location":"api/tab-utils/#troubleshooting","title":"Troubleshooting","text":""},{"location":"api/tab-utils/#common-issues","title":"Common Issues","text":"<p>Tab Not Found: <pre><code>TimeoutError: Could not find tab with label 'Contact Details'\n</code></pre> Solutions: - Verify exact tab label text (check case sensitivity) - Ensure tab is visible (not hidden or collapsed) - Check if tab is dynamically loaded - Wait for any loading animations to complete</p> <p>Selected Tab Detection Fails: <pre><code>TimeoutError: Could not find selected tab with label 'Overview'\n</code></pre> Solutions: - Verify the tab is actually selected - Check if tab selection state has changed - Ensure tab structure matches expected format - Look for alternative selection indicators</p> <p>Tab Selection Not Working: <pre><code>Element not clickable or tab doesn't change\n</code></pre> Solutions: - Verify tab is not disabled - Check for overlaying elements blocking click - Ensure JavaScript has finished executing - Try explicit wait before tab interaction</p>"},{"location":"api/tab-utils/#debugging-tips","title":"Debugging Tips","text":"<ol> <li> <p>Inspect Tab Structure:    <pre><code># Find all tab elements\ntabs = wait.driver.find_elements(By.XPATH, \"//div[@role='link']\")\nfor tab in tabs:\n    print(f\"Tab HTML: {tab.get_attribute('outerHTML')}\")\n</code></pre></p> </li> <li> <p>Check Tab Labels:    <pre><code># Extract all available tab labels\ntab_labels = []\ntabs = wait.driver.find_elements(By.XPATH, \"//div[@role='link']//p/span\")\nfor tab in tabs:\n    if tab.text:\n        tab_labels.append(tab.text)\nprint(f\"Available tabs: {tab_labels}\")\n</code></pre></p> </li> <li> <p>Verify Current Selection:    <pre><code># Find currently selected tab\nselected_tabs = wait.driver.find_elements(By.XPATH, \"//p/strong\")\nfor tab in selected_tabs:\n    if tab.text:\n        print(f\"Currently selected: {tab.text}\")\n</code></pre></p> </li> </ol>"},{"location":"api/tab-utils/#integration-examples","title":"Integration Examples","text":""},{"location":"api/tab-utils/#with-pytest-and-tab-validation","title":"With pytest and Tab Validation","text":"<pre><code>import pytest\nfrom selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom robo_appian.components.TabUtils import TabUtils\n\nclass TestTabNavigation:\n    def setup_method(self):\n        self.driver = webdriver.Chrome()\n        self.wait = WebDriverWait(self.driver, 10)\n\n    def teardown_method(self):\n        self.driver.quit()\n\n    @pytest.mark.parametrize(\"tab_name\", [\n        \"Personal Information\",\n        \"Contact Details\", \n        \"Employment History\",\n        \"Documents\"\n    ])\n    def test_tab_navigation(self, tab_name):\n        self.driver.get(\"https://your-appian-app.com\")\n\n        # Navigate to tab\n        TabUtils.selectInactiveTabByLabelText(self.wait, tab_name)\n\n        # Verify tab is now selected\n        selected_tab = TabUtils.findSelectedTabByLabelText(self.wait, tab_name)\n        assert selected_tab is not None, f\"Tab '{tab_name}' should be selected\"\n</code></pre>"},{"location":"api/tab-utils/#with-page-object-model","title":"With Page Object Model","text":"<pre><code>class MultiTabFormPage:\n    def __init__(self, driver):\n        self.driver = driver\n        self.wait = WebDriverWait(driver, 10)\n\n    def navigate_to_tab(self, tab_name):\n        \"\"\"Navigate to specified tab\"\"\"\n        TabUtils.selectInactiveTabByLabelText(self.wait, tab_name)\n\n    def get_current_tab(self):\n        \"\"\"Get the currently selected tab name\"\"\"\n        # Implementation would need to extract current tab name\n        pass\n\n    def complete_personal_info_tab(self, data):\n        \"\"\"Fill personal information tab\"\"\"\n        self.navigate_to_tab(\"Personal Information\")\n\n        InputUtils.setValueByLabelText(self.wait, \"First Name\", data['first_name'])\n        InputUtils.setValueByLabelText(self.wait, \"Last Name\", data['last_name'])\n        DateUtils.setValueByLabelText(self.wait, \"Date of Birth\", data['dob'])\n\n    def complete_contact_tab(self, data):\n        \"\"\"Fill contact information tab\"\"\"\n        self.navigate_to_tab(\"Contact Details\")\n\n        InputUtils.setValueByLabelText(self.wait, \"Email\", data['email'])\n        InputUtils.setValueByLabelText(self.wait, \"Phone\", data['phone'])\n        InputUtils.setValueByLabelText(self.wait, \"Address\", data['address'])\n\n    def submit_form(self):\n        \"\"\"Navigate to review tab and submit\"\"\"\n        self.navigate_to_tab(\"Review\")\n        ButtonUtils.clickByLabelText(self.wait, \"Submit\")\n</code></pre>"},{"location":"api/tab-utils/#with-configuration-driven-navigation","title":"With Configuration-Driven Navigation","text":"<pre><code>import yaml\n\nclass TabWorkflowManager:\n    def __init__(self, wait):\n        self.wait = wait\n\n    def execute_workflow(self, workflow_config):\n        \"\"\"Execute tab-based workflow from configuration\"\"\"\n\n        for step in workflow_config['steps']:\n            tab_name = step['tab']\n            actions = step['actions']\n\n            # Navigate to tab\n            TabUtils.selectInactiveTabByLabelText(self.wait, tab_name)\n\n            # Execute actions for this tab\n            for action in actions:\n                action_type = action['type']\n\n                if action_type == 'input':\n                    InputUtils.setValueByLabelText(\n                        self.wait, action['label'], action['value']\n                    )\n                elif action_type == 'dropdown':\n                    DropdownUtils.selectDropdownValueByLabelText(\n                        self.wait, action['label'], action['value']\n                    )\n                elif action_type == 'button':\n                    ButtonUtils.clickByLabelText(self.wait, action['label'])\n                elif action_type == 'date':\n                    DateUtils.setValueByLabelText(\n                        self.wait, action['label'], action['value']\n                    )\n\n# Load workflow from YAML\nwith open('tab_workflow.yaml') as f:\n    workflow = yaml.safe_load(f)\n\n# Execute workflow\nmanager = TabWorkflowManager(wait)\nmanager.execute_workflow(workflow)\n</code></pre>"},{"location":"api/tab-utils/#related-components","title":"Related Components","text":"<ul> <li>ButtonUtils - For buttons within tab content</li> <li>InputUtils - For form fields in tabs</li> <li>DropdownUtils - For dropdowns in tab content</li> <li>ComponentDriver - For universal component interactions</li> </ul> <p>TabUtils provides essential tab navigation capabilities for Appian applications, enabling seamless movement through multi-step forms and complex interfaces while maintaining reliability and ease of use.</p>"},{"location":"api/table-utils/","title":"TableUtils","text":"<p>The <code>TableUtils</code> class provides comprehensive methods for interacting with table components in Appian applications. It handles the complex operations required for data table interactions, including finding tables, counting rows, and locating specific cell components.</p>"},{"location":"api/table-utils/#overview","title":"Overview","text":"<p>TableUtils is designed to handle Appian's data table structures, providing reliable methods to:</p> <ul> <li>Find tables by column names</li> <li>Count table rows (excluding empty rows)</li> <li>Locate specific cell components by row and column</li> <li>Extract data from table cells</li> <li>Navigate complex table hierarchies</li> </ul>"},{"location":"api/table-utils/#class-methods","title":"Class Methods","text":"<p>Signature: <pre><code>@staticmethod\ndef findTableByColumnName(wait: WebDriverWait, columnName: str) -&gt; WebElement\n</code></pre></p>"},{"location":"api/table-utils/#findtablebycolumnname","title":"findTableByColumnName()","text":"<p>Signature: @staticmethod def findTableByColumnName(wait: WebDriverWait, columnName: str) -&gt; WebElement <pre><code>**Parameters:**\n- `wait` (WebDriverWait): Selenium WebDriverWait instance for element waiting\n- `columnName` (str): The name of the column to search for in table headers\n\n**Returns:**\n- `WebElement`: The table element containing the specified column\n\n**Usage Example:**\n```python\nfrom selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom robo_appian.components.TableUtils import TableUtils\n\ndriver = webdriver.Chrome()\nwait = WebDriverWait(driver, 10)\n\ntable = TableUtils.findTableByColumnName(wait, \"Employee ID\")\n\n# Find table with status column\nstatus_table = TableUtils.findTableByColumnName(wait, \"Status\")\n\n\n### rowCount()\nCounts the number of data rows in a table, excluding empty rows and header rows.\n\n```python\n@staticmethod\ndef rowCount(tableObject: WebElement) -&gt; int\n</code></pre></p> <p>Parameters: - <code>tableObject</code> (WebElement): The table WebElement to count rows in</p> <p>Returns: - <code>int</code>: The number of data rows in the table</p> <p>Usage Example: <pre><code># Get table and count rows\ntable = TableUtils.findTableByColumnName(wait, \"Employee ID\")\nrow_count = TableUtils.rowCount(table)\nprint(f\"Table contains {row_count} rows\")\n\n# Use row count for iteration\nfor i in range(row_count):\n    # Process each row\n**Signature:**\n```python\n@staticmethod\ndef findComponentFromTableCell(wait: WebDriverWait, rowNumber: int, columnName: str) -&gt; WebElement\n</code></pre>     cell_component = TableUtils.findComponentFromTableCell(wait, i, \"Status\")     # Perform operations on cell component</p>"},{"location":"api/table-utils/#findcomponentfromtablecell","title":"findComponentFromTableCell()","text":"<p>Finds a component within a specific table cell by row number and column name.</p> <p>Signature: <pre><code>@staticmethod\ndef findComponentFromTableCell(wait: WebDriverWait, rowNumber: int, columnName: str) -&gt; WebElement\n</code></pre></p> <p>Parameters: - <code>wait</code> (WebDriverWait): Selenium WebDriverWait instance for element waiting - <code>rowNumber</code> (int): The row number (0-based index) to search in - <code>columnName</code> (str): The name of the column to search in</p> <p>Returns: - <code>WebElement</code>: The component found in the specified table cell</p> <p>Usage Example: <pre><code># Find component in first row, Status column\nstatus_component = TableUtils.findComponentFromTableCell(wait, 0, \"Status\")\n\n# Find component in third row, Name column\nname_component = TableUtils.findComponentFromTableCell(wait, 2, \"Employee Name\")\n\n# Find and interact with button in specific cell\nbutton_component = TableUtils.findComponentFromTableCell(wait, 1, \"Actions\")\nbutton_component.click()\n\n# Find and get text from specific cell\ntext_component = TableUtils.findComponentFromTableCell(wait, 0, \"Department\")\ndepartment_text = text_component.text\n</code></pre></p>"},{"location":"api/table-utils/#best-practices","title":"Best Practices","text":""},{"location":"api/table-utils/#table-identification","title":"Table Identification","text":"<p>Use unique column names for reliable table identification: <pre><code># \u2705 Recommended - unique column identifier\ntable = TableUtils.findTableByColumnName(wait, \"Employee ID\")\n\n# \u274c Less reliable - common column name might match multiple tables\ntable = TableUtils.findTableByColumnName(wait, \"Name\")\n</code></pre></p>"},{"location":"api/table-utils/#row-iteration","title":"Row Iteration","text":"<p>Always check row count before iterating: <pre><code>table = TableUtils.findTableByColumnName(wait, \"Employee ID\")\nrow_count = TableUtils.rowCount(table)\n\nif row_count &gt; 0:\n    for i in range(row_count):\n        # Process each row safely\n        component = TableUtils.findComponentFromTableCell(wait, i, \"Status\")\n        # Perform operations\nelse:\n    print(\"Table is empty\")\n</code></pre></p>"},{"location":"api/table-utils/#error-handling","title":"Error Handling","text":"<p>Wrap table operations in try-catch blocks: <pre><code>try:\n    table = TableUtils.findTableByColumnName(wait, \"Employee ID\")\n    row_count = TableUtils.rowCount(table)\n\n    for i in range(row_count):\n        try:\n            component = TableUtils.findComponentFromTableCell(wait, i, \"Status\")\n            # Process component\n        except Exception as e:\n            print(f\"Error processing row {i}: {e}\")\n            continue\n\nexcept Exception as e:\n    print(f\"Error finding or processing table: {e}\")\n</code></pre></p>"},{"location":"api/table-utils/#common-use-cases","title":"Common Use Cases","text":""},{"location":"api/table-utils/#data-validation","title":"Data Validation","text":"<pre><code># Validate all employees have active status\ntable = TableUtils.findTableByColumnName(wait, \"Employee ID\")\nrow_count = TableUtils.rowCount(table)\n\ninactive_employees = []\nfor i in range(row_count):\n    status_component = TableUtils.findComponentFromTableCell(wait, i, \"Status\")\n    status_text = status_component.text\n\n    if status_text != \"Active\":\n        emp_id_component = TableUtils.findComponentFromTableCell(wait, i, \"Employee ID\")\n        inactive_employees.append(emp_id_component.text)\n\nprint(f\"Inactive employees: {inactive_employees}\")\n</code></pre>"},{"location":"api/table-utils/#bulk-actions","title":"Bulk Actions","text":"<pre><code># Select all items in a table\ntable = TableUtils.findTableByColumnName(wait, \"Select\")\nrow_count = TableUtils.rowCount(table)\n\nfor i in range(row_count):\n    checkbox = TableUtils.findComponentFromTableCell(wait, i, \"Select\")\n    if not checkbox.is_selected():\n        checkbox.click()\n\n# Perform bulk action\nButtonUtils.clickByLabelText(wait, \"Delete Selected\")\n</code></pre>"},{"location":"api/table-utils/#data-extraction","title":"Data Extraction","text":"<pre><code># Extract employee data from table\ntable = TableUtils.findTableByColumnName(wait, \"Employee ID\")\nrow_count = TableUtils.rowCount(table)\n\nemployees = []\nfor i in range(row_count):\n    emp_data = {\n        'id': TableUtils.findComponentFromTableCell(wait, i, \"Employee ID\").text,\n        'name': TableUtils.findComponentFromTableCell(wait, i, \"Name\").text,\n        'department': TableUtils.findComponentFromTableCell(wait, i, \"Department\").text,\n        'status': TableUtils.findComponentFromTableCell(wait, i, \"Status\").text\n    }\n    employees.append(emp_data)\n\nprint(f\"Extracted {len(employees)} employee records\")\n</code></pre>"},{"location":"api/table-utils/#table-search-and-filter","title":"Table Search and Filter","text":"<pre><code>def find_employee_by_id(wait, employee_id):\n    \"\"\"Find a specific employee by ID in the table\"\"\"\n    table = TableUtils.findTableByColumnName(wait, \"Employee ID\")\n    row_count = TableUtils.rowCount(table)\n\n    for i in range(row_count):\n        id_component = TableUtils.findComponentFromTableCell(wait, i, \"Employee ID\")\n        if id_component.text == employee_id:\n            return {\n                'row_index': i,\n                'name': TableUtils.findComponentFromTableCell(wait, i, \"Name\").text,\n                'status': TableUtils.findComponentFromTableCell(wait, i, \"Status\").text\n            }\n\n    return None\n\n# Usage\nemployee = find_employee_by_id(wait, \"EMP001\")\nif employee:\n    print(f\"Found employee: {employee['name']} at row {employee['row_index']}\")\n</code></pre>"},{"location":"api/table-utils/#row-specific-actions","title":"Row-Specific Actions","text":"<pre><code># Edit specific employee record\ndef edit_employee_status(wait, employee_id, new_status):\n    table = TableUtils.findTableByColumnName(wait, \"Employee ID\")\n    row_count = TableUtils.rowCount(table)\n\n    for i in range(row_count):\n        id_component = TableUtils.findComponentFromTableCell(wait, i, \"Employee ID\")\n        if id_component.text == employee_id:\n            # Click edit button for this row\n            edit_button = TableUtils.findComponentFromTableCell(wait, i, \"Actions\")\n            edit_button.click()\n\n            # Update status\n            DropdownUtils.selectDropdownValueByLabelText(wait, \"Status\", new_status)\n            ButtonUtils.clickByLabelText(wait, \"Save\")\n            return True\n\n    return False\n\n# Edit employee EMP001 status to Inactive\nedit_employee_status(wait, \"EMP001\", \"Inactive\")\n</code></pre>"},{"location":"api/table-utils/#technical-details","title":"Technical Details","text":""},{"location":"api/table-utils/#table-structure","title":"Table Structure","text":"<p>TableUtils expects Appian tables with this structure: <pre><code>&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th scope=\"col\" abbr=\"Employee ID\" class=\"headCell_0\"&gt;Employee ID&lt;/th&gt;\n      &lt;th scope=\"col\" abbr=\"Name\" class=\"headCell_1\"&gt;Name&lt;/th&gt;\n      &lt;th scope=\"col\" abbr=\"Status\" class=\"headCell_2\"&gt;Status&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr data-dnd-name=\"row 1\"&gt;\n      &lt;td&gt;EMP001&lt;/td&gt;\n      &lt;td&gt;John Doe&lt;/td&gt;\n      &lt;td&gt;Active&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre></p> <ol> <li>Finds the header cell with matching <code>abbr</code> attribute</li> <li>Extracts the column number from the <code>headCell_X</code> CSS class</li> <li>Returns the 0-based column index</li> </ol>"},{"location":"api/table-utils/#row-selection-logic","title":"Row Selection Logic","text":"<p>The XPath for row selection: <pre><code>./tbody/tr[./td[not (@data-empty-grid-message)]]\n- Header rows\n- Non-data rows\n\n### Cell Component Selection\n\nThe XPath for finding cell components:\n```xpath\n.//table[./thead/tr/th[@abbr=\"{columnName}\"]]/tbody/tr[@data-dnd-name=\"row {rowNumber}\"]/td[not (@data-empty-grid-message)][{columnNumber}]/*\n</code></pre></p> <ul> <li>The component within the cell</li> </ul>"},{"location":"api/table-utils/#troubleshooting","title":"Troubleshooting","text":""},{"location":"api/table-utils/#common-issues","title":"Common Issues","text":"<p>Solutions: - Verify exact column name spelling and case - Check if table is loaded and visible - Ensure column name matches the <code>abbr</code> attribute in table headers - Wait for any dynamic table loading to complete</p> <p>Solutions: - Check if table has pagination - Verify filters are not hiding rows - Ensure table data is fully loaded - Check for empty state messages</p> <p>Cell Component Not Found: <pre><code>RuntimeError: Could not find component in cell at row 1, column 'Status'\n</code></pre> Solutions: - Verify row index is within table bounds (0-based indexing) - Check if the specified column exists - Ensure cell contains an interactive component - Verify table structure matches expected format</p>"},{"location":"api/table-utils/#debugging-tips","title":"Debugging Tips","text":"<ol> <li> <p>Inspect Table Structure:    <pre><code># Get table and inspect HTML\ntable = TableUtils.findTableByColumnName(wait, \"Employee ID\")\nprint(table.get_attribute(\"outerHTML\"))\n</code></pre></p> </li> <li> <p>Verify Column Names:    <pre><code># Find all column headers\nheaders = table.find_elements(By.XPATH, \".//thead/tr/th\")\nfor header in headers:\n    print(f\"Column: {header.get_attribute('abbr')}\")\n</code></pre></p> </li> <li> <p>Check Row Structure:    <pre><code># Inspect specific row\nrows = table.find_elements(By.XPATH, \".//tbody/tr\")\nprint(f\"Found {len(rows)} rows\")\nfor i, row in enumerate(rows):\n    print(f\"Row {i}: {row.get_attribute('data-dnd-name')}\")\n</code></pre></p> </li> </ol>"},{"location":"api/table-utils/#integration-examples","title":"Integration Examples","text":""},{"location":"api/table-utils/#with-pytest-and-data-validation","title":"With pytest and Data Validation","text":"<pre><code>import pytest\nfrom selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom robo_appian.components.TableUtils import TableUtils\n\nclass TestTableData:\n    def setup_method(self):\n        self.driver = webdriver.Chrome()\n        self.wait = WebDriverWait(self.driver, 10)\n\n    def teardown_method(self):\n        self.driver.quit()\n\n    def test_employee_table_data(self):\n        self.driver.get(\"https://your-appian-app.com\")\n\n        # Validate table exists and has data\n        table = TableUtils.findTableByColumnName(self.wait, \"Employee ID\")\n        row_count = TableUtils.rowCount(table)\n\n        assert row_count &gt; 0, \"Employee table should contain data\"\n\n        # Validate first row data\n        emp_id = TableUtils.findComponentFromTableCell(self.wait, 0, \"Employee ID\").text\n        assert emp_id.startswith(\"EMP\"), f\"Invalid employee ID format: {emp_id}\"\n\n        # Check status values\n        for i in range(row_count):\n            status = TableUtils.findComponentFromTableCell(self.wait, i, \"Status\").text\n            assert status in [\"Active\", \"Inactive\"], f\"Invalid status: {status}\"\n</code></pre>"},{"location":"api/table-utils/#with-page-object-model","title":"With Page Object Model","text":"<pre><code>class EmployeeManagementPage:\n    def __init__(self, driver):\n        self.driver = driver\n        self.wait = WebDriverWait(driver, 10)\n\n    def get_employee_count(self):\n        table = TableUtils.findTableByColumnName(self.wait, \"Employee ID\")\n        return TableUtils.rowCount(table)\n\n    def find_employee_by_id(self, emp_id):\n        table = TableUtils.findTableByColumnName(self.wait, \"Employee ID\")\n        row_count = TableUtils.rowCount(table)\n\n        for i in range(row_count):\n            id_component = TableUtils.findComponentFromTableCell(self.wait, i, \"Employee ID\")\n            if id_component.text == emp_id:\n                return {\n                    'row': i,\n                    'name': TableUtils.findComponentFromTableCell(self.wait, i, \"Name\").text,\n                    'status': TableUtils.findComponentFromTableCell(self.wait, i, \"Status\").text,\n                    'department': TableUtils.findComponentFromTableCell(self.wait, i, \"Department\").text\n                }\n        return None\n\n    def update_employee_status(self, emp_id, new_status):\n        employee = self.find_employee_by_id(emp_id)\n        if employee:\n            edit_button = TableUtils.findComponentFromTableCell(\n                self.wait, employee['row'], \"Actions\"\n            )\n            edit_button.click()\n\n            DropdownUtils.selectDropdownValueByLabelText(self.wait, \"Status\", new_status)\n            ButtonUtils.clickByLabelText(self.wait, \"Save\")\n            return True\n        return False\n</code></pre>"},{"location":"api/table-utils/#with-data-export-functionality","title":"With Data Export Functionality","text":"<pre><code>import csv\n\nclass TableDataExporter:\n    def __init__(self, wait):\n        self.wait = wait\n\n    def export_table_to_csv(self, column_name, output_file, columns):\n        \"\"\"Export table data to CSV file\"\"\"\n        table = TableUtils.findTableByColumnName(self.wait, column_name)\n        row_count = TableUtils.rowCount(table)\n\n        with open(output_file, 'w', newline='') as csvfile:\n            writer = csv.DictWriter(csvfile, fieldnames=columns)\n            writer.writeheader()\n\n            for i in range(row_count):\n                row_data = {}\n                for col in columns:\n                    try:\n                        component = TableUtils.findComponentFromTableCell(self.wait, i, col)\n                        row_data[col] = component.text\n                    except Exception:\n                        row_data[col] = \"\"  # Handle missing data\n\n# Usage\nexporter.export_table_to_csv(\n    \"Employee ID\", \n    \"employees.csv\", \n    [\"Employee ID\", \"Name\", \"Department\", \"Status\", \"Hire Date\"]\n)\n</code></pre>"},{"location":"api/table-utils/#related-components","title":"Related Components","text":"<ul> <li>ButtonUtils - For interacting with action buttons in table cells</li> <li>DropdownUtils - For dropdown selections in table cells</li> <li>InputUtils - For input fields in editable table cells</li> <li>ComponentDriver - For universal component interactions</li> </ul> <p>TableUtils provides powerful table interaction capabilities for Appian applications, enabling reliable data extraction, validation, and manipulation operations on complex table structures.</p>"},{"location":"examples/forms/","title":"Forms Example","text":"<p>This page will provide examples for automating Appian forms using Robo Appian utilities.</p>"},{"location":"examples/forms/#example-fill-and-submit-a-form","title":"Example: Fill and Submit a Form","text":"<pre><code># Example code for filling and submitting a form\n</code></pre>"},{"location":"examples/login/","title":"Login Test Examples","text":"<p>This section provides comprehensive examples for testing login functionality in Appian applications using Robo Appian.</p>"},{"location":"examples/login/#basic-login-test","title":"Basic Login Test","text":"<p>Here's a simple login test that demonstrates the core concepts:</p> <pre><code>from selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom robo_appian.components.InputUtils import InputUtils\nfrom robo_appian.components.ButtonUtils import ButtonUtils\nfrom robo_appian.utils.ComponentUtils import ComponentUtils\n\ndef test_basic_login():\n    \"\"\"Test basic login functionality\"\"\"\n    driver = webdriver.Chrome()\n    wait = WebDriverWait(driver, 10)\n\n    try:\n        # Navigate to login page\n        driver.get(\"https://your-appian-site.com/login\")\n\n        # Enter credentials\n        InputUtils.setValueByLabelText(wait, \"Username\", \"testuser\")\n        InputUtils.setValueByLabelText(wait, \"Password\", \"password123\")\n\n        # Click login button\n        ButtonUtils.clickByLabelText(wait, \"Sign In\")\n\n        # Verify successful login\n        if ComponentUtils.checkComponentExistsByXpath(wait, \"//div[contains(@class, 'dashboard')]\"):\n            print(\"\u2705 Login successful!\")\n            return True\n        else:\n            print(\"\u274c Login failed!\")\n            return False\n\n    except Exception as e:\n        print(f\"\u274c Login test failed: {e}\")\n        return False\n    finally:\n        driver.quit()\n\nif __name__ == \"__main__\":\n    test_basic_login()\n</code></pre>"},{"location":"examples/login/#advanced-login-tests","title":"Advanced Login Tests","text":""},{"location":"examples/login/#multi-user-login-test","title":"Multi-User Login Test","text":"<pre><code>def test_multiple_users():\n    \"\"\"Test login with multiple user accounts\"\"\"\n    users = [\n        {\"username\": \"admin\", \"password\": \"admin123\", \"expected_role\": \"Administrator\"},\n        {\"username\": \"user1\", \"password\": \"user123\", \"expected_role\": \"User\"},\n        {\"username\": \"manager\", \"password\": \"mgr123\", \"expected_role\": \"Manager\"}\n    ]\n\n    for user in users:\n        driver = webdriver.Chrome()\n        wait = WebDriverWait(driver, 10)\n\n        try:\n            driver.get(\"https://your-appian-site.com/login\")\n\n            # Login with user credentials\n            InputUtils.setValueByLabelText(wait, \"Username\", user[\"username\"])\n            InputUtils.setValueByLabelText(wait, \"Password\", user[\"password\"])\n            ButtonUtils.clickByLabelText(wait, \"Sign In\")\n\n            # Verify role-specific elements\n            role_xpath = f\"//span[contains(text(), '{user['expected_role']}')]\"\n            if ComponentUtils.checkComponentExistsByXpath(wait, role_xpath):\n                print(f\"\u2705 {user['username']} logged in successfully with {user['expected_role']} role\")\n            else:\n                print(f\"\u274c {user['username']} login failed or incorrect role\")\n\n        finally:\n            driver.quit()\n</code></pre>"},{"location":"examples/login/#login-with-error-handling","title":"Login with Error Handling","text":"<pre><code>def test_login_with_error_handling():\n    \"\"\"Test login with comprehensive error handling\"\"\"\n    driver = webdriver.Chrome()\n    wait = WebDriverWait(driver, 10)\n\n    try:\n        driver.get(\"https://your-appian-site.com/login\")\n\n        # Test invalid credentials first\n        InputUtils.setValueByLabelText(wait, \"Username\", \"invalid_user\")\n        InputUtils.setValueByLabelText(wait, \"Password\", \"wrong_password\")\n        ButtonUtils.clickByLabelText(wait, \"Sign In\")\n\n        # Check for error message\n        error_xpath = \"//div[contains(@class, 'error') or contains(text(), 'Invalid')]\"\n        if ComponentUtils.checkComponentExistsByXpath(wait, error_xpath):\n            print(\"\u2705 Error message displayed for invalid credentials\")\n\n            # Clear fields and try valid credentials\n            InputUtils.setValueByLabelText(wait, \"Username\", \"testuser\")\n            InputUtils.setValueByLabelText(wait, \"Password\", \"password123\")\n            ButtonUtils.clickByLabelText(wait, \"Sign In\")\n\n            # Verify successful login\n            if ComponentUtils.checkComponentExistsByXpath(wait, \"//div[contains(@class, 'dashboard')]\"):\n                print(\"\u2705 Login successful with valid credentials\")\n            else:\n                print(\"\u274c Login failed even with valid credentials\")\n        else:\n            print(\"\u274c No error message displayed for invalid credentials\")\n\n    except Exception as e:\n        print(f\"\u274c Test failed: {e}\")\n    finally:\n        driver.quit()\n</code></pre>"},{"location":"examples/login/#integration-with-testing-frameworks","title":"Integration with Testing Frameworks","text":""},{"location":"examples/login/#pytest-example","title":"pytest Example","text":"<pre><code>import pytest\nfrom selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\n\n@pytest.fixture(scope=\"session\")\ndef driver():\n    \"\"\"WebDriver fixture for the test session\"\"\"\n    driver = webdriver.Chrome()\n    yield driver\n    driver.quit()\n\n@pytest.fixture\ndef wait(driver):\n    \"\"\"WebDriverWait fixture\"\"\"\n    return WebDriverWait(driver, 10)\n\n@pytest.fixture\ndef login_page(driver):\n    \"\"\"Navigate to login page\"\"\"\n    driver.get(\"https://your-appian-site.com/login\")\n    return driver\n\nclass TestLogin:\n    \"\"\"Login test class\"\"\"\n\n    def test_valid_login(self, driver, wait, login_page):\n        \"\"\"Test login with valid credentials\"\"\"\n        InputUtils.setValueByLabelText(wait, \"Username\", \"testuser\")\n        InputUtils.setValueByLabelText(wait, \"Password\", \"password123\")\n        ButtonUtils.clickByLabelText(wait, \"Sign In\")\n\n        assert ComponentUtils.checkComponentExistsByXpath(wait, \"//div[contains(@class, 'dashboard')]\")\n\n    def test_invalid_login(self, driver, wait, login_page):\n        \"\"\"Test login with invalid credentials\"\"\"\n        InputUtils.setValueByLabelText(wait, \"Username\", \"invalid\")\n        InputUtils.setValueByLabelText(wait, \"Password\", \"invalid\")\n        ButtonUtils.clickByLabelText(wait, \"Sign In\")\n\n        assert ComponentUtils.checkComponentExistsByXpath(wait, \"//div[contains(@class, 'error')]\")\n\n    @pytest.mark.parametrize(\"username,password,should_succeed\", [\n        (\"admin\", \"admin123\", True),\n        (\"user1\", \"user123\", True),\n        (\"invalid\", \"invalid\", False),\n        (\"\", \"\", False)\n    ])\n    def test_login_scenarios(self, driver, wait, login_page, username, password, should_succeed):\n        \"\"\"Test multiple login scenarios\"\"\"\n        InputUtils.setValueByLabelText(wait, \"Username\", username)\n        InputUtils.setValueByLabelText(wait, \"Password\", password)\n        ButtonUtils.clickByLabelText(wait, \"Sign In\")\n\n        if should_succeed:\n            assert ComponentUtils.checkComponentExistsByXpath(wait, \"//div[contains(@class, 'dashboard')]\")\n        else:\n            assert ComponentUtils.checkComponentExistsByXpath(wait, \"//div[contains(@class, 'error')]\")\n</code></pre>"},{"location":"examples/login/#unittest-example","title":"unittest Example","text":"<pre><code>import unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\n\nclass TestAppianLogin(unittest.TestCase):\n    \"\"\"Login test cases using unittest\"\"\"\n\n    def setUp(self):\n        \"\"\"Set up test fixtures\"\"\"\n        self.driver = webdriver.Chrome()\n        self.wait = WebDriverWait(self.driver, 10)\n        self.driver.get(\"https://your-appian-site.com/login\")\n\n    def tearDown(self):\n        \"\"\"Clean up after tests\"\"\"\n        self.driver.quit()\n\n    def test_successful_login(self):\n        \"\"\"Test successful login\"\"\"\n        InputUtils.setValueByLabelText(self.wait, \"Username\", \"testuser\")\n        InputUtils.setValueByLabelText(self.wait, \"Password\", \"password123\")\n        ButtonUtils.clickByLabelText(self.wait, \"Sign In\")\n\n        self.assertTrue(\n            ComponentUtils.checkComponentExistsByXpath(\n                self.wait, \"//div[contains(@class, 'dashboard')]\"\n            )\n        )\n\n    def test_failed_login(self):\n        \"\"\"Test failed login\"\"\"\n        InputUtils.setValueByLabelText(self.wait, \"Username\", \"invalid\")\n        InputUtils.setValueByLabelText(self.wait, \"Password\", \"invalid\")\n        ButtonUtils.clickByLabelText(self.wait, \"Sign In\")\n\n        self.assertTrue(\n            ComponentUtils.checkComponentExistsByXpath(\n                self.wait, \"//div[contains(@class, 'error')]\"\n            )\n        )\n\nif __name__ == \"__main__\":\n    unittest.main()\n</code></pre>"},{"location":"examples/login/#best-practices-for-login-tests","title":"Best Practices for Login Tests","text":""},{"location":"examples/login/#1-use-environment-variables-for-credentials","title":"1. Use Environment Variables for Credentials","text":"<pre><code>import os\n\ndef test_login_with_env_credentials():\n    \"\"\"Use environment variables for test credentials\"\"\"\n    username = os.getenv(\"TEST_USERNAME\", \"default_user\")\n    password = os.getenv(\"TEST_PASSWORD\", \"default_pass\")\n\n    driver = webdriver.Chrome()\n    wait = WebDriverWait(driver, 10)\n\n    try:\n        driver.get(\"https://your-appian-site.com/login\")\n        InputUtils.setValueByLabelText(wait, \"Username\", username)\n        InputUtils.setValueByLabelText(wait, \"Password\", password)\n        ButtonUtils.clickByLabelText(wait, \"Sign In\")\n\n        # Verify login\n        assert ComponentUtils.checkComponentExistsByXpath(wait, \"//div[contains(@class, 'dashboard')]\")\n\n    finally:\n        driver.quit()\n</code></pre>"},{"location":"examples/login/#2-implement-page-object-pattern","title":"2. Implement Page Object Pattern","text":"<pre><code>class LoginPage:\n    \"\"\"Page Object for login page\"\"\"\n\n    def __init__(self, driver, wait):\n        self.driver = driver\n        self.wait = wait\n\n    def navigate_to_login(self):\n        \"\"\"Navigate to login page\"\"\"\n        self.driver.get(\"https://your-appian-site.com/login\")\n\n    def enter_credentials(self, username, password):\n        \"\"\"Enter login credentials\"\"\"\n        InputUtils.setValueByLabelText(self.wait, \"Username\", username)\n        InputUtils.setValueByLabelText(self.wait, \"Password\", password)\n\n    def click_login(self):\n        \"\"\"Click login button\"\"\"\n        ButtonUtils.clickByLabelText(self.wait, \"Sign In\")\n\n    def is_login_successful(self):\n        \"\"\"Check if login was successful\"\"\"\n        return ComponentUtils.checkComponentExistsByXpath(\n            self.wait, \"//div[contains(@class, 'dashboard')]\"\n        )\n\n    def is_error_displayed(self):\n        \"\"\"Check if error message is displayed\"\"\"\n        return ComponentUtils.checkComponentExistsByXpath(\n            self.wait, \"//div[contains(@class, 'error')]\"\n        )\n\n# Usage\ndef test_with_page_object():\n    driver = webdriver.Chrome()\n    wait = WebDriverWait(driver, 10)\n    login_page = LoginPage(driver, wait)\n\n    try:\n        login_page.navigate_to_login()\n        login_page.enter_credentials(\"testuser\", \"password123\")\n        login_page.click_login()\n\n        assert login_page.is_login_successful()\n\n    finally:\n        driver.quit()\n</code></pre>"},{"location":"examples/login/#3-add-logging-and-screenshots","title":"3. Add Logging and Screenshots","text":"<pre><code>import logging\nimport time\nfrom datetime import datetime\n\n# Set up logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef test_login_with_logging():\n    \"\"\"Login test with comprehensive logging\"\"\"\n    driver = webdriver.Chrome()\n    wait = WebDriverWait(driver, 10)\n\n    try:\n        logger.info(\"Starting login test\")\n\n        # Navigate to login page\n        logger.info(\"Navigating to login page\")\n        driver.get(\"https://your-appian-site.com/login\")\n\n        # Take screenshot of login page\n        timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n        driver.save_screenshot(f\"login_page_{timestamp}.png\")\n        logger.info(f\"Screenshot saved: login_page_{timestamp}.png\")\n\n        # Enter credentials\n        logger.info(\"Entering credentials\")\n        InputUtils.setValueByLabelText(wait, \"Username\", \"testuser\")\n        InputUtils.setValueByLabelText(wait, \"Password\", \"password123\")\n\n        # Click login\n        logger.info(\"Clicking login button\")\n        ButtonUtils.clickByLabelText(wait, \"Sign In\")\n\n        # Verify and screenshot result\n        if ComponentUtils.checkComponentExistsByXpath(wait, \"//div[contains(@class, 'dashboard')]\"):\n            logger.info(\"\u2705 Login successful\")\n            driver.save_screenshot(f\"login_success_{timestamp}.png\")\n        else:\n            logger.error(\"\u274c Login failed\")\n            driver.save_screenshot(f\"login_failure_{timestamp}.png\")\n\n    except Exception as e:\n        logger.error(f\"\u274c Login test failed with exception: {e}\")\n        driver.save_screenshot(f\"login_error_{timestamp}.png\")\n    finally:\n        driver.quit()\n        logger.info(\"Login test completed\")\n</code></pre>"},{"location":"examples/login/#troubleshooting-login-issues","title":"Troubleshooting Login Issues","text":""},{"location":"examples/login/#common-problems-and-solutions","title":"Common Problems and Solutions","text":""},{"location":"examples/login/#1-login-button-not-found","title":"1. Login Button Not Found","text":"<pre><code># Problem: Button label might be different\n# Try different variations\nlogin_button_labels = [\"Sign In\", \"Login\", \"Log In\", \"Submit\", \"Enter\"]\n\nfor label in login_button_labels:\n    if ComponentUtils.checkComponentExistsByXpath(wait, f\"//button[contains(text(), '{label}')]\"):\n        ButtonUtils.clickByLabelText(wait, label)\n        break\n</code></pre>"},{"location":"examples/login/#2-input-fields-not-found","title":"2. Input Fields Not Found","text":"<pre><code># Problem: Input labels might be different\n# Check for various label formats\nusername_labels = [\"Username\", \"User Name\", \"Email\", \"Login ID\", \"User ID\"]\npassword_labels = [\"Password\", \"Pass\", \"Secret\"]\n\nfor label in username_labels:\n    try:\n        InputUtils.setValueByLabelText(wait, label, \"testuser\")\n        break\n    except:\n        continue\n</code></pre>"},{"location":"examples/login/#3-page-load-issues","title":"3. Page Load Issues","text":"<pre><code># Problem: Page takes time to load\n# Add explicit waits\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.by import By\n\n# Wait for login form to be present\nwait.until(EC.presence_of_element_located((By.XPATH, \"//form\")))\n\n# Or wait for specific element\nwait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@type='text']\")))\n</code></pre> <p>This comprehensive guide should help you implement robust login tests for your Appian applications!</p>"},{"location":"examples/tables/","title":"Tables Example","text":"<p>This page will provide examples for automating Appian tables using Robo Appian utilities.</p>"},{"location":"examples/tables/#example-interact-with-a-table","title":"Example: Interact with a Table","text":"<pre><code># Example code for interacting with a table\n</code></pre>"},{"location":"examples/workflows/","title":"Workflows Example","text":"<p>This page will provide examples for automating Appian workflows using Robo Appian utilities.</p>"},{"location":"examples/workflows/#example-automate-a-workflow","title":"Example: Automate a Workflow","text":"<pre><code># Example code for automating a workflow\n</code></pre>"},{"location":"frameworks/pytest/","title":"Using Robo Appian with Pytest","text":"<p>This page explains how to use Robo Appian in your Pytest-based test suites.</p>"},{"location":"frameworks/pytest/#installation","title":"Installation","text":"<p>Make sure you have <code>pytest</code>, <code>selenium</code>, and <code>robo_appian</code> installed:</p> <pre><code>pip install pytest selenium robo_appian\n</code></pre>"},{"location":"frameworks/pytest/#example-basic-pytest-test","title":"Example: Basic Pytest Test","text":"<pre><code>import pytest\nfrom selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom robo_appian.components.InputUtils import InputUtils\nfrom robo_appian.components.ButtonUtils import ButtonUtils\n\n@pytest.fixture\ndef driver():\n    driver = webdriver.Chrome()\n    yield driver\n    driver.quit()\n\ndef test_login(driver):\n    wait = WebDriverWait(driver, 10)\n    driver.get(\"https://your-appian-app.com\")\n    InputUtils.setValueByLabelText(wait, \"Username\", \"test_user\")\n    InputUtils.setValueByLabelText(wait, \"Password\", \"password123\")\n    ButtonUtils.clickByLabelText(wait, \"Sign In\")\n    # Add assertions here\n</code></pre>"},{"location":"frameworks/pytest/#tips","title":"Tips","text":"<ul> <li>Use fixtures to manage WebDriver setup/teardown</li> <li>Use assertions to validate outcomes</li> <li>Integrate with CI/CD for automated test runs</li> </ul>"},{"location":"frameworks/unittest/","title":"Using Robo Appian with Unittest","text":"<p>This page explains how to use Robo Appian in your Unittest-based test suites.</p>"},{"location":"frameworks/unittest/#installation","title":"Installation","text":"<p>Make sure you have <code>selenium</code> and <code>robo_appian</code> installed:</p> <pre><code>pip install selenium robo_appian\n</code></pre>"},{"location":"frameworks/unittest/#example-basic-unittest-test","title":"Example: Basic Unittest Test","text":"<pre><code>import unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom robo_appian.components.InputUtils import InputUtils\nfrom robo_appian.components.ButtonUtils import ButtonUtils\n\nclass TestLogin(unittest.TestCase):\n    def setUp(self):\n        self.driver = webdriver.Chrome()\n        self.wait = WebDriverWait(self.driver, 10)\n\n    def tearDown(self):\n        self.driver.quit()\n\n    def test_login(self):\n        self.driver.get(\"https://your-appian-app.com\")\n        InputUtils.setValueByLabelText(self.wait, \"Username\", \"test_user\")\n        InputUtils.setValueByLabelText(self.wait, \"Password\", \"password123\")\n        ButtonUtils.clickByLabelText(self.wait, \"Sign In\")\n        # Add assertions here\n\nif __name__ == \"__main__\":\n    unittest.main()\n</code></pre>"},{"location":"frameworks/unittest/#tips","title":"Tips","text":"<ul> <li>Use <code>setUp</code> and <code>tearDown</code> for WebDriver lifecycle</li> <li>Use assertions to validate outcomes</li> <li>Integrate with CI/CD for automated test runs</li> </ul>"},{"location":"getting-started/first-test/","title":"Your First Test","text":"<p>This guide will walk you through creating your very first Robo Appian test step by step. By the end, you'll have a working test that demonstrates the core concepts of Appian test automation.</p>"},{"location":"getting-started/first-test/#what-well-build","title":"What We'll Build","text":"<p>We'll create a comprehensive test that:</p> <ol> <li>Logs into an Appian application</li> <li>Navigates to a form</li> <li>Fills out employee information</li> <li>Submits the form</li> <li>Validates the results</li> </ol>"},{"location":"getting-started/first-test/#step-by-step-tutorial","title":"Step-by-Step Tutorial","text":""},{"location":"getting-started/first-test/#step-1-set-up-your-environment","title":"Step 1: Set Up Your Environment","text":"<p>First, create a new directory for your test project:</p> <pre><code>mkdir my_first_appian_test\ncd my_first_appian_test\n</code></pre> <p>Create a Python file for your test:</p> <pre><code>touch test_employee_form.py\n</code></pre>"},{"location":"getting-started/first-test/#step-2-import-required-modules","title":"Step 2: Import Required Modules","text":"<p>Open <code>test_employee_form.py</code> and add the necessary imports:</p> test_employee_form.py<pre><code># Selenium imports\nfrom selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\n\n# Robo Appian imports\nfrom robo_appian.components.InputUtils import InputUtils\nfrom robo_appian.components.ButtonUtils import ButtonUtils\nfrom robo_appian.components.DropdownUtils import DropdownUtils\nfrom robo_appian.components.DateUtils import DateUtils\nfrom robo_appian.components.TabUtils import TabUtils\nfrom robo_appian.utils.ComponentUtils import ComponentUtils\n\n# Standard library imports\nimport time\n</code></pre>"},{"location":"getting-started/first-test/#step-3-create-the-test-function","title":"Step 3: Create the Test Function","text":"<p>Add the main test function:</p> <pre><code>def test_employee_form():\n    \"\"\"\n    Test that creates a new employee record in Appian\n    \"\"\"\n    print(\"\ud83d\ude80 Starting employee form test...\")\n\n    # Initialize WebDriver\n    driver = webdriver.Chrome()\n    wait = WebDriverWait(driver, 10)\n\n    try:\n        # We'll add test steps here\n        pass\n    except Exception as e:\n        print(f\"\u274c Test failed with error: {e}\")\n        return False\n    finally:\n        driver.quit()\n\n    return True\n</code></pre>"},{"location":"getting-started/first-test/#step-4-add-login-functionality","title":"Step 4: Add Login Functionality","text":"<p>Replace the <code>pass</code> statement with login logic:</p> <pre><code>try:\n    # Step 1: Navigate to the application\n    print(\"\ud83d\udcf1 Navigating to Appian application...\")\n    driver.get(\"https://your-appian-site.com/login\")\n\n    # Step 2: Log in\n    print(\"\ud83d\udd10 Logging in...\")\n    InputUtils.setValueByLabelText(wait, \"Username\", \"testuser\")\n    InputUtils.setValueByLabelText(wait, \"Password\", \"password123\")\n    ButtonUtils.clickByLabelText(wait, \"Sign In\")\n\n    # Step 3: Verify login success\n    print(\"\u2705 Checking login status...\")\n    if ComponentUtils.checkComponentExistsByXpath(wait, \"//div[contains(@class, 'dashboard')]\"):\n        print(\"\u2705 Login successful!\")\n    else:\n        raise Exception(\"Login failed - dashboard not found\")\n</code></pre>"},{"location":"getting-started/first-test/#step-5-navigate-to-employee-form","title":"Step 5: Navigate to Employee Form","text":"<p>Add navigation logic after the login verification:</p> <pre><code>    # Step 4: Navigate to employee section\n    print(\"\ud83d\udccb Navigating to employee form...\")\n    TabUtils.clickTabByLabelText(wait, \"Human Resources\")\n    ButtonUtils.clickByLabelText(wait, \"Add New Employee\")\n\n    # Wait for form to load\n    time.sleep(2)\n    print(\"\u2705 Employee form loaded\")\n</code></pre>"},{"location":"getting-started/first-test/#step-6-fill-out-the-form","title":"Step 6: Fill Out the Form","text":"<p>Add form filling logic:</p> <pre><code>    # Step 5: Fill out employee information\n    print(\"\ud83d\udcdd Filling out employee form...\")\n\n    # Personal Information\n    InputUtils.setValueByLabelText(wait, \"Employee ID\", \"EMP2024001\")\n    InputUtils.setValueByLabelText(wait, \"First Name\", \"John\")\n    InputUtils.setValueByLabelText(wait, \"Last Name\", \"Doe\")\n    InputUtils.setValueByLabelText(wait, \"Email\", \"john.doe@company.com\")\n    InputUtils.setValueByLabelText(wait, \"Phone Number\", \"555-123-4567\")\n\n    # Work Information\n    DateUtils.setValueByLabelText(wait, \"Start Date\", ComponentUtils.today())\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"Department\", \"Engineering\")\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"Position\", \"Software Developer\")\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"Employment Type\", \"Full-time\")\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"Status\", \"Active\")\n\n    # Address Information\n    InputUtils.setValueByLabelText(wait, \"Street Address\", \"123 Main Street\")\n    InputUtils.setValueByLabelText(wait, \"City\", \"San Francisco\")\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"State\", \"California\")\n    InputUtils.setValueByLabelText(wait, \"ZIP Code\", \"94102\")\n\n    print(\"\u2705 Form filled successfully\")\n</code></pre>"},{"location":"getting-started/first-test/#step-7-submit-and-validate","title":"Step 7: Submit and Validate","text":"<p>Add submission and validation logic:</p> <pre><code>    # Step 6: Submit the form\n    print(\"\ud83d\udcbe Submitting employee form...\")\n    ButtonUtils.clickByLabelText(wait, \"Save Employee\")\n\n    # Step 7: Validate submission\n    print(\"\ud83d\udd0d Validating form submission...\")\n\n    # Check for success message\n    success_xpath = \"//div[contains(text(), 'Employee created successfully')]\"\n    if ComponentUtils.checkComponentExistsByXpath(wait, success_xpath):\n        print(\"\u2705 Employee created successfully!\")\n\n        # Optional: Verify the employee appears in the list\n        TabUtils.clickTabByLabelText(wait, \"Employee List\")\n\n        # Check if our employee appears in the table\n        employee_xpath = \"//td[contains(text(), 'EMP2024001')]\"\n        if ComponentUtils.checkComponentExistsByXpath(wait, employee_xpath):\n            print(\"\u2705 Employee found in employee list!\")\n        else:\n            print(\"\u26a0\ufe0f Employee not found in list, but creation was successful\")\n    else:\n        raise Exception(\"Employee creation failed - no success message found\")\n\n    print(\"\ud83c\udf89 Test completed successfully!\")\n</code></pre>"},{"location":"getting-started/first-test/#step-8-add-main-execution-block","title":"Step 8: Add Main Execution Block","text":"<p>Add the execution block at the end of the file:</p> <pre><code>if __name__ == \"__main__\":\n    success = test_employee_form()\n    if success:\n        print(\"\\n\ud83c\udf8a All tests passed! \ud83c\udf8a\")\n    else:\n        print(\"\\n\ud83d\udca5 Test failed! \ud83d\udca5\")\n</code></pre>"},{"location":"getting-started/first-test/#complete-code","title":"Complete Code","text":"<p>Here's the complete test file:</p> test_employee_form.py<pre><code># Selenium imports\nfrom selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\n\n# Robo Appian imports\nfrom robo_appian.components.InputUtils import InputUtils\nfrom robo_appian.components.ButtonUtils import ButtonUtils\nfrom robo_appian.components.DropdownUtils import DropdownUtils\nfrom robo_appian.components.DateUtils import DateUtils\nfrom robo_appian.components.TabUtils import TabUtils\nfrom robo_appian.utils.ComponentUtils import ComponentUtils\n\n# Standard library imports\nimport time\n\ndef test_employee_form():\n    \"\"\"\n    Test that creates a new employee record in Appian\n    \"\"\"\n    print(\"\ud83d\ude80 Starting employee form test...\")\n\n    # Initialize WebDriver\n    driver = webdriver.Chrome()\n    wait = WebDriverWait(driver, 10)\n\n    try:\n        # Step 1: Navigate to the application\n        print(\"\ud83d\udcf1 Navigating to Appian application...\")\n        driver.get(\"https://your-appian-site.com/login\")\n\n        # Step 2: Log in\n        print(\"\ud83d\udd10 Logging in...\")\n        InputUtils.setValueByLabelText(wait, \"Username\", \"testuser\")\n        InputUtils.setValueByLabelText(wait, \"Password\", \"password123\")\n        ButtonUtils.clickByLabelText(wait, \"Sign In\")\n\n        # Step 3: Verify login success\n        print(\"\u2705 Checking login status...\")\n        if ComponentUtils.checkComponentExistsByXpath(wait, \"//div[contains(@class, 'dashboard')]\"):\n            print(\"\u2705 Login successful!\")\n        else:\n            raise Exception(\"Login failed - dashboard not found\")\n\n        # Step 4: Navigate to employee section\n        print(\"\ud83d\udccb Navigating to employee form...\")\n        TabUtils.clickTabByLabelText(wait, \"Human Resources\")\n        ButtonUtils.clickByLabelText(wait, \"Add New Employee\")\n\n        # Wait for form to load\n        time.sleep(2)\n        print(\"\u2705 Employee form loaded\")\n\n        # Step 5: Fill out employee information\n        print(\"\ud83d\udcdd Filling out employee form...\")\n\n        # Personal Information\n        InputUtils.setValueByLabelText(wait, \"Employee ID\", \"EMP2024001\")\n        InputUtils.setValueByLabelText(wait, \"First Name\", \"John\")\n        InputUtils.setValueByLabelText(wait, \"Last Name\", \"Doe\")\n        InputUtils.setValueByLabelText(wait, \"Email\", \"john.doe@company.com\")\n        InputUtils.setValueByLabelText(wait, \"Phone Number\", \"555-123-4567\")\n\n        # Work Information\n        DateUtils.setValueByLabelText(wait, \"Start Date\", ComponentUtils.today())\n        DropdownUtils.selectDropdownValueByLabelText(wait, \"Department\", \"Engineering\")\n        DropdownUtils.selectDropdownValueByLabelText(wait, \"Position\", \"Software Developer\")\n        DropdownUtils.selectDropdownValueByLabelText(wait, \"Employment Type\", \"Full-time\")\n        DropdownUtils.selectDropdownValueByLabelText(wait, \"Status\", \"Active\")\n\n        # Address Information\n        InputUtils.setValueByLabelText(wait, \"Street Address\", \"123 Main Street\")\n        InputUtils.setValueByLabelText(wait, \"City\", \"San Francisco\")\n        DropdownUtils.selectDropdownValueByLabelText(wait, \"State\", \"California\")\n        InputUtils.setValueByLabelText(wait, \"ZIP Code\", \"94102\")\n\n        print(\"\u2705 Form filled successfully\")\n\n        # Step 6: Submit the form\n        print(\"\ud83d\udcbe Submitting employee form...\")\n        ButtonUtils.clickByLabelText(wait, \"Save Employee\")\n\n        # Step 7: Validate submission\n        print(\"\ud83d\udd0d Validating form submission...\")\n\n        # Check for success message\n        success_xpath = \"//div[contains(text(), 'Employee created successfully')]\"\n        if ComponentUtils.checkComponentExistsByXpath(wait, success_xpath):\n            print(\"\u2705 Employee created successfully!\")\n\n            # Optional: Verify the employee appears in the list\n            TabUtils.clickTabByLabelText(wait, \"Employee List\")\n\n            # Check if our employee appears in the table\n            employee_xpath = \"//td[contains(text(), 'EMP2024001')]\"\n            if ComponentUtils.checkComponentExistsByXpath(wait, employee_xpath):\n                print(\"\u2705 Employee found in employee list!\")\n            else:\n                print(\"\u26a0\ufe0f Employee not found in list, but creation was successful\")\n        else:\n            raise Exception(\"Employee creation failed - no success message found\")\n\n        print(\"\ud83c\udf89 Test completed successfully!\")\n\n    except Exception as e:\n        print(f\"\u274c Test failed with error: {e}\")\n        return False\n    finally:\n        driver.quit()\n\n    return True\n\nif __name__ == \"__main__\":\n    success = test_employee_form()\n    if success:\n        print(\"\\n\ud83c\udf8a All tests passed! \ud83c\udf8a\")\n    else:\n        print(\"\\n\ud83d\udca5 Test failed! \ud83d\udca5\")\n</code></pre>"},{"location":"getting-started/first-test/#running-your-test","title":"Running Your Test","text":"<p>Execute your test:</p> <pre><code>python test_employee_form.py\n</code></pre> <p>Expected output: <pre><code>\ud83d\ude80 Starting employee form test...\n\ud83d\udcf1 Navigating to Appian application...\n\ud83d\udd10 Logging in...\n\u2705 Checking login status...\n\u2705 Login successful!\n\ud83d\udccb Navigating to employee form...\n\u2705 Employee form loaded\n\ud83d\udcdd Filling out employee form...\n\u2705 Form filled successfully\n\ud83d\udcbe Submitting employee form...\n\ud83d\udd0d Validating form submission...\n\u2705 Employee created successfully!\n\u2705 Employee found in employee list!\n\ud83c\udf89 Test completed successfully!\n\n\ud83c\udf8a All tests passed! \ud83c\udf8a\n</code></pre></p>"},{"location":"getting-started/first-test/#key-concepts-learned","title":"Key Concepts Learned","text":"<p>Through this tutorial, you've learned:</p>"},{"location":"getting-started/first-test/#1-label-based-interaction","title":"1. Label-Based Interaction","text":"<p><pre><code>InputUtils.setValueByLabelText(wait, \"First Name\", \"John\")\n</code></pre> Instead of complex XPath selectors, use the visible label text.</p>"},{"location":"getting-started/first-test/#2-component-specific-methods","title":"2. Component-Specific Methods","text":"<p>Each UI component type has specialized methods: - <code>InputUtils</code> for text fields - <code>DropdownUtils</code> for dropdowns - <code>DateUtils</code> for date pickers - <code>ButtonUtils</code> for buttons</p>"},{"location":"getting-started/first-test/#3-built-in-validation","title":"3. Built-in Validation","text":"<p><pre><code>ComponentUtils.checkComponentExistsByXpath(wait, xpath)\n</code></pre> Easy methods to verify test results.</p>"},{"location":"getting-started/first-test/#4-date-helpers","title":"4. Date Helpers","text":"<p><pre><code>ComponentUtils.today()  # Returns today's date in MM/DD/YYYY format\n</code></pre> Convenient utilities for common scenarios.</p>"},{"location":"getting-started/first-test/#5-error-handling","title":"5. Error Handling","text":"<p>Always wrap tests in try-catch blocks and close the browser in the finally block.</p>"},{"location":"getting-started/first-test/#making-it-your-own","title":"Making It Your Own","text":"<p>To adapt this test for your Appian application:</p> <ol> <li>Update the URL: Change <code>https://your-appian-site.com/login</code> to your actual Appian URL</li> <li>Adjust Labels: Use the exact label text from your application</li> <li>Modify Field Values: Use appropriate test data for your use case</li> <li>Update Validation: Customize success criteria based on your application's behavior</li> </ol>"},{"location":"getting-started/first-test/#common-customizations","title":"Common Customizations","text":""},{"location":"getting-started/first-test/#using-test-data-from-files","title":"Using Test Data from Files","text":"<pre><code>import json\n\n# Load test data from JSON file\nwith open('test_data.json', 'r') as f:\n    test_data = json.load(f)\n\nInputUtils.setValueByLabelText(wait, \"First Name\", test_data['employee']['first_name'])\n</code></pre>"},{"location":"getting-started/first-test/#adding-screenshots-on-failure","title":"Adding Screenshots on Failure","text":"<pre><code>except Exception as e:\n    # Take screenshot on failure\n    driver.save_screenshot(f\"test_failure_{int(time.time())}.png\")\n    print(f\"\u274c Test failed with error: {e}\")\n    return False\n</code></pre>"},{"location":"getting-started/first-test/#parameterized-tests","title":"Parameterized Tests","text":"<pre><code>def create_employee(employee_data):\n    \"\"\"Create an employee with given data\"\"\"\n    for field, value in employee_data.items():\n        InputUtils.setValueByLabelText(wait, field, value)\n\n# Test multiple employees\nemployees = [\n    {\"First Name\": \"John\", \"Last Name\": \"Doe\", \"Email\": \"john@company.com\"},\n    {\"First Name\": \"Jane\", \"Last Name\": \"Smith\", \"Email\": \"jane@company.com\"}\n]\n\nfor employee in employees:\n    create_employee(employee)\n</code></pre>"},{"location":"getting-started/first-test/#next-steps","title":"Next Steps","text":"<p>Congratulations! You've created your first Robo Appian test. Here's what to explore next:</p> <ul> <li> <p>:material-test-tube:{ .lg .middle } Testing Frameworks</p> <p>Learn how to organize tests with pytest or unittest</p> <p>:octicons-arrow-right-24: Testing Frameworks</p> </li> <li> <p>:material-cog:{ .lg .middle } Advanced Features</p> <p>Explore ComponentDriver and advanced patterns</p> <p>:octicons-arrow-right-24: Advanced Features</p> </li> <li> <p>:material-shield-check:{ .lg .middle } Best Practices</p> <p>Learn industry best practices for test automation</p> <p>:octicons-arrow-right-24: Best Practices</p> </li> <li> <p>:material-bug:{ .lg .middle } Error Handling</p> <p>Master error handling and debugging techniques</p> <p>:octicons-arrow-right-24: Error Handling</p> </li> </ul> <p>Happy testing! \ud83d\ude80</p>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<p>Before installing Robo Appian, ensure you have the following requirements:</p> <ul> <li>Python 3.12 or higher</li> <li>A supported web browser (Chrome, Firefox, Edge, Safari)</li> <li>Internet connection for downloading dependencies</li> </ul>"},{"location":"getting-started/installation/#install-robo-appian","title":"Install Robo Appian","text":""},{"location":"getting-started/installation/#using-pip-recommended","title":"Using pip (Recommended)","text":"<p>Install Robo Appian from PyPI using pip:</p> <pre><code>pip install robo_appian\n</code></pre>"},{"location":"getting-started/installation/#using-poetry","title":"Using poetry","text":"<p>If you're using Poetry for dependency management:</p> <pre><code>poetry add robo_appian\n</code></pre>"},{"location":"getting-started/installation/#webdriver-setup","title":"WebDriver Setup","text":"<p>Robo Appian requires a WebDriver to control your browser. Here are the setup instructions for different browsers:</p>"},{"location":"getting-started/installation/#chrome-recommended","title":"Chrome (Recommended)","text":"Automatic SetupManual Setup <pre><code>pip install webdriver-manager\n</code></pre> <p>Then in your Python code: <pre><code>from selenium import webdriver\nfrom webdriver_manager.chrome import ChromeDriverManager\nfrom selenium.webdriver.chrome.service import Service\n\nservice = Service(ChromeDriverManager().install())\ndriver = webdriver.Chrome(service=service)\n</code></pre></p> <ol> <li>Download ChromeDriver from https://chromedriver.chromium.org/</li> <li>Extract the executable and add it to your system PATH</li> <li>Or specify the path directly in your code:</li> </ol> <pre><code>from selenium import webdriver\nfrom selenium.webdriver.chrome.service import Service\n\nservice = Service('/path/to/chromedriver')\ndriver = webdriver.Chrome(service=service)\n</code></pre>"},{"location":"getting-started/installation/#firefox","title":"Firefox","text":"Automatic SetupManual Setup <pre><code>pip install webdriver-manager\n</code></pre> <pre><code>from selenium import webdriver\nfrom webdriver_manager.firefox import GeckoDriverManager\nfrom selenium.webdriver.firefox.service import Service\n\nservice = Service(GeckoDriverManager().install())\ndriver = webdriver.Firefox(service=service)\n</code></pre> <ol> <li>Download GeckoDriver from https://github.com/mozilla/geckodriver/releases</li> <li>Extract and add to PATH or specify path directly</li> </ol>"},{"location":"getting-started/installation/#edge","title":"Edge","text":"Automatic Setup <pre><code>pip install webdriver-manager\n</code></pre> <pre><code>from selenium import webdriver\nfrom webdriver_manager.microsoft import EdgeChromiumDriverManager\nfrom selenium.webdriver.edge.service import Service\n\nservice = Service(EdgeChromiumDriverManager().install())\ndriver = webdriver.Edge(service=service)\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>Create a simple test script to verify everything is working:</p> test_installation.py<pre><code>from selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom robo_appian.utils.ComponentUtils import ComponentUtils\n\ndef test_installation():\n    \"\"\"Test script to verify Robo Appian installation\"\"\"\n\n    # Initialize WebDriver\n    driver = webdriver.Chrome()\n    wait = WebDriverWait(driver, 10)\n\n    try:\n        # Test basic functionality\n        driver.get(\"https://www.google.com\")\n\n        # Test Robo Appian utilities\n        today = ComponentUtils.today()\n        print(f\"\u2705 Robo Appian installed successfully!\")\n        print(f\"\u2705 Today's date: {today}\")\n        print(f\"\u2705 WebDriver working correctly\")\n\n    except Exception as e:\n        print(f\"\u274c Installation test failed: {e}\")\n    finally:\n        driver.quit()\n\nif __name__ == \"__main__\":\n    test_installation()\n</code></pre> <p>Run the test:</p> <pre><code>python test_installation.py\n</code></pre> <p>Expected output: <pre><code>\u2705 Robo Appian installed successfully!\n\u2705 Today's date: 08/03/2025\n\u2705 WebDriver working correctly\n</code></pre></p>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":""},{"location":"getting-started/installation/#1-webdriver-path-issues","title":"1. WebDriver Path Issues","text":"<p>Error: <code>selenium.common.exceptions.WebDriverException: 'chromedriver' executable needs to be in PATH</code></p> <p>Solution: Use webdriver-manager or add ChromeDriver to your system PATH:</p> <pre><code>from webdriver_manager.chrome import ChromeDriverManager\nfrom selenium.webdriver.chrome.service import Service\n\nservice = Service(ChromeDriverManager().install())\ndriver = webdriver.Chrome(service=service)\n</code></pre>"},{"location":"getting-started/installation/#2-browser-version-mismatch","title":"2. Browser Version Mismatch","text":"<p>Error: <code>SessionNotCreatedException: session not created: This version of ChromeDriver only supports Chrome version X</code></p> <p>Solution: Update your browser or use webdriver-manager to automatically download the correct version:</p> <pre><code>pip install --upgrade webdriver-manager\n</code></pre>"},{"location":"getting-started/installation/#3-import-errors","title":"3. Import Errors","text":"<p>Error: <code>ModuleNotFoundError: No module named 'robo_appian'</code></p> <p>Solution: Ensure you're using the correct Python environment:</p> <pre><code># Check your Python version\npython --version\n\n# Check if robo_appian is installed\npip list | grep robo_appian\n\n# Reinstall if necessary\npip install --upgrade robo_appian\n</code></pre>"},{"location":"getting-started/installation/#4-permission-issues-linuxmac","title":"4. Permission Issues (Linux/Mac)","text":"<p>Error: <code>Permission denied</code> when running WebDriver</p> <p>Solution: Make the WebDriver executable:</p> <pre><code>chmod +x /path/to/chromedriver\n</code></pre>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues not covered here:</p> <ol> <li>Contact the author for support:</li> <li>Email: dinilmithra.mailme@gmail.com</li> <li>LinkedIn: Dinil Mithra</li> <li>When contacting, please include:</li> <li>Your operating system</li> <li>Python version (<code>python --version</code>)</li> <li>Browser version</li> <li>Complete error message</li> <li>Minimal code example that reproduces the issue</li> </ol>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Now that you have Robo Appian installed, you're ready to:</p> <ul> <li>Write your first test</li> <li>Learn about the core components</li> <li>Explore examples</li> </ul>"},{"location":"getting-started/installation/#virtual-environment-recommended","title":"Virtual Environment (Recommended)","text":"<p>For better dependency management, consider using a virtual environment:</p> venvconda <pre><code># Create virtual environment\npython -m venv robo_appian_env\n\n# Activate (Windows)\nrobo_appian_env\\Scripts\\activate\n\n# Activate (Linux/Mac)\nsource robo_appian_env/bin/activate\n\n# Install Robo Appian\npip install robo_appian\n</code></pre> <pre><code># Create conda environment\nconda create -n robo_appian python=3.12\n\n# Activate environment\nconda activate robo_appian\n\n# Install Robo Appian\npip install robo_appian\n</code></pre> <p>This keeps your project dependencies isolated and prevents conflicts with other Python projects.</p>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>Get up and running with Robo Appian in just a few minutes! This guide will walk you through creating your first automated test for an Appian application.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<p>Make sure you have:</p> <ul> <li>[x] Python 3.12+ installed</li> <li>[x] Robo Appian installed (<code>pip install robo_appian</code>)</li> <li>[x] Chrome browser and ChromeDriver set up</li> <li>[x] Access to an Appian application for testing</li> </ul> <p>Need help with installation?</p> <p>Check out our Installation Guide if you haven't set up Robo Appian yet.</p>"},{"location":"getting-started/quick-start/#your-first-test","title":"Your First Test","text":"<p>Let's create a simple login test to demonstrate Robo Appian's capabilities.</p>"},{"location":"getting-started/quick-start/#step-1-basic-setup","title":"Step 1: Basic Setup","text":"<p>Create a new Python file called <code>first_test.py</code>:</p> first_test.py<pre><code>from selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom robo_appian.components.InputUtils import InputUtils\nfrom robo_appian.components.ButtonUtils import ButtonUtils\nfrom robo_appian.utils.ComponentUtils import ComponentUtils\n\ndef test_appian_login():\n    \"\"\"Simple login test using Robo Appian\"\"\"\n\n    # Initialize WebDriver with 10-second timeout\n    driver = webdriver.Chrome()\n    wait = WebDriverWait(driver, 10)\n\n    try:\n        # Navigate to your Appian login page\n        driver.get(\"https://your-appian-site.com/login\")\n\n        # Enter credentials using label-based methods\n        InputUtils.setValueByLabelText(wait, \"Username\", \"your_username\")\n        InputUtils.setValueByLabelText(wait, \"Password\", \"your_password\")\n\n        # Click the login button\n        ButtonUtils.clickByLabelText(wait, \"Sign In\")\n\n        # Verify login was successful\n        if ComponentUtils.checkComponentExistsByXpath(wait, \"//div[contains(@class, 'dashboard')]\"):\n            print(\"\u2705 Login successful!\")\n        else:\n            print(\"\u274c Login failed!\")\n\n    except Exception as e:\n        print(f\"\u274c Test failed with error: {e}\")\n    finally:\n        # Always close the browser\n        driver.quit()\n\nif __name__ == \"__main__\":\n    test_appian_login()\n</code></pre>"},{"location":"getting-started/quick-start/#step-2-run-your-test","title":"Step 2: Run Your Test","text":"<pre><code>python first_test.py\n</code></pre>"},{"location":"getting-started/quick-start/#step-3-understanding-the-code","title":"Step 3: Understanding the Code","text":"<p>Let's break down what each part does:</p> WebDriver SetupLabel-Based InteractionComponent Validation <pre><code>driver = webdriver.Chrome()\nwait = WebDriverWait(driver, 10)\n</code></pre> <ul> <li>Creates a Chrome browser instance</li> <li>Sets up a 10-second wait timeout for element interactions</li> </ul> <pre><code>InputUtils.setValueByLabelText(wait, \"Username\", \"your_username\")\n</code></pre> <ul> <li>Finds the input field with label \"Username\"</li> <li>Sets the value to \"your_username\"</li> <li>Much simpler than complex XPath selectors!</li> </ul> <pre><code>ComponentUtils.checkComponentExistsByXpath(wait, \"//div[contains(@class, 'dashboard')]\")\n</code></pre> <ul> <li>Checks if a dashboard element exists</li> <li>Returns <code>True</code> if found, <code>False</code> otherwise</li> </ul>"},{"location":"getting-started/quick-start/#common-patterns","title":"Common Patterns","text":"<p>Here are some common patterns you'll use frequently:</p>"},{"location":"getting-started/quick-start/#form-filling","title":"Form Filling","text":"<pre><code>def fill_employee_form():\n    # Personal information\n    InputUtils.setValueByLabelText(wait, \"First Name\", \"John\")\n    InputUtils.setValueByLabelText(wait, \"Last Name\", \"Doe\")\n    InputUtils.setValueByLabelText(wait, \"Email\", \"john.doe@company.com\")\n\n    # Work information\n    DateUtils.setValueByLabelText(wait, \"Start Date\", \"01/15/2024\")\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"Department\", \"Engineering\")\n\n    # Submit the form\n    ButtonUtils.clickByLabelText(wait, \"Save Employee\")\n</code></pre>"},{"location":"getting-started/quick-start/#data-validation","title":"Data Validation","text":"<pre><code>def validate_employee_data():\n    # Check if employee was saved successfully\n    success_xpath = \"//div[contains(text(), 'Employee saved successfully')]\"\n    if ComponentUtils.checkComponentExistsByXpath(wait, success_xpath):\n        print(\"\u2705 Employee saved!\")\n        return True\n    else:\n        print(\"\u274c Employee save failed!\")\n        return False\n</code></pre>"},{"location":"getting-started/quick-start/#table-interaction","title":"Table Interaction","text":"<pre><code>def get_employee_count():\n    # Find the employee table\n    table = TableUtils.findTableByColumnName(wait, \"Employee ID\")\n    count = TableUtils.rowCount(table)\n    print(f\"Total employees: {count}\")\n    return count\n</code></pre>"},{"location":"getting-started/quick-start/#best-practices","title":"Best Practices","text":""},{"location":"getting-started/quick-start/#1-use-try-catch-blocks","title":"1. Use Try-Catch Blocks","text":"<p>Always wrap your test code in try-catch blocks:</p> <pre><code>try:\n    # Your test code here\n    InputUtils.setValueByLabelText(wait, \"Username\", \"testuser\")\n    ButtonUtils.clickByLabelText(wait, \"Submit\")\nexcept Exception as e:\n    print(f\"Test failed: {e}\")\nfinally:\n    driver.quit()  # Always close the browser\n</code></pre>"},{"location":"getting-started/quick-start/#2-use-descriptive-variable-names","title":"2. Use Descriptive Variable Names","text":"<pre><code># Good\nlogin_button = \"Sign In\"\nusername_field = \"Username\"\n\n# Not so good  \nbtn = \"Sign In\"\nfield1 = \"Username\"\n</code></pre>"},{"location":"getting-started/quick-start/#3-set-appropriate-timeouts","title":"3. Set Appropriate Timeouts","text":"<pre><code># For slow applications\nwait = WebDriverWait(driver, 20)\n\n# For quick checks\nwait_short = WebDriverWait(driver, 5)\n</code></pre>"},{"location":"getting-started/quick-start/#4-check-component-existence-for-optional-elements","title":"4. Check Component Existence for Optional Elements","text":"<pre><code># Check if optional field exists before interacting\nif ComponentUtils.checkComponentExistsByXpath(wait, \"//input[@id='optional-field']\"):\n    InputUtils.setValueByLabelText(wait, \"Optional Field\", \"value\")\n</code></pre>"},{"location":"getting-started/quick-start/#advanced-example","title":"Advanced Example","text":"<p>Here's a more comprehensive example that demonstrates multiple Robo Appian features:</p> advanced_example.py<pre><code>from selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom robo_appian.components import *\nfrom robo_appian.utils.ComponentUtils import ComponentUtils\nfrom robo_appian.controllers.ComponentDriver import ComponentDriver\n\ndef test_employee_management_workflow():\n    \"\"\"Complete employee management test workflow\"\"\"\n\n    driver = webdriver.Chrome()\n    wait = WebDriverWait(driver, 10)\n\n    try:\n        # Step 1: Login\n        driver.get(\"https://your-appian-app.com\")\n        InputUtils.setValueByLabelText(wait, \"Username\", \"admin\")\n        InputUtils.setValueByLabelText(wait, \"Password\", \"password\")\n        ButtonUtils.clickByLabelText(wait, \"Sign In\")\n\n        # Step 2: Navigate to employee section\n        TabUtils.clickTabByLabelText(wait, \"Employees\")\n\n        # Step 3: Add new employee using ComponentDriver\n        ButtonUtils.clickByLabelText(wait, \"Add Employee\")\n\n        employee_data = [\n            (\"Input Text\", \"Set Value\", \"Employee ID\", \"EMP001\"),\n            (\"Input Text\", \"Set Value\", \"First Name\", \"John\"),\n            (\"Input Text\", \"Set Value\", \"Last Name\", \"Doe\"),\n            (\"Input Text\", \"Set Value\", \"Email\", \"john.doe@company.com\"),\n            (\"Date\", \"Set Value\", \"Start Date\", ComponentUtils.today()),\n            (\"Dropdown\", \"Select\", \"Department\", \"Engineering\"),\n            (\"Dropdown\", \"Select\", \"Status\", \"Active\"),\n            (\"Button\", \"Click\", \"Save Employee\", None)\n        ]\n\n        for component_type, action, label, value in employee_data:\n            ComponentDriver.execute(wait, component_type, action, label, value)\n\n        # Step 4: Verify employee was added\n        if ComponentUtils.checkComponentExistsByXpath(wait, \"//div[contains(text(), 'Employee saved')]\"):\n            print(\"\u2705 Employee added successfully!\")\n\n            # Step 5: Verify in employee table\n            table = TableUtils.findTableByColumnName(wait, \"Employee ID\")\n            row_count = TableUtils.rowCount(table)\n            print(f\"\u2705 Total employees: {row_count}\")\n\n            # Find our new employee\n            for row in range(1, row_count + 1):\n                emp_id = TableUtils.findComponentFromTableCell(wait, row, \"Employee ID\").text\n                if emp_id == \"EMP001\":\n                    name = TableUtils.findComponentFromTableCell(wait, row, \"Name\").text\n                    print(f\"\u2705 Found employee: {name}\")\n                    break\n        else:\n            print(\"\u274c Employee addition failed!\")\n\n    except Exception as e:\n        print(f\"\u274c Test failed: {e}\")\n    finally:\n        driver.quit()\n\nif __name__ == \"__main__\":\n    test_employee_management_workflow()\n</code></pre>"},{"location":"getting-started/quick-start/#whats-next","title":"What's Next?","text":"<p>Now that you've created your first test, here are some next steps:</p> <ul> <li> <p>:material-book-open-page-variant:{ .lg .middle } Learn Core Components</p> <p>Dive deeper into each component type and their capabilities</p> <p>:octicons-arrow-right-24: Core Components</p> </li> <li> <p>:material-code-braces:{ .lg .middle } Explore Examples</p> <p>See real-world examples and common patterns</p> <p>:octicons-arrow-right-24: Examples</p> </li> <li> <p>:material-api:{ .lg .middle } API Reference</p> <p>Complete reference for all classes and methods</p> <p>:octicons-arrow-right-24: API Reference</p> </li> <li> <p>:material-test-tube:{ .lg .middle } Testing Frameworks</p> <p>Learn how to integrate with pytest and unittest</p> <p>:octicons-arrow-right-24: Testing Frameworks</p> </li> </ul>"},{"location":"getting-started/quick-start/#common-issues","title":"Common Issues","text":""},{"location":"getting-started/quick-start/#issue-element-not-found","title":"Issue: Element Not Found","text":"<p>Problem: <code>Element with label 'Username' not found</code></p> <p>Solutions: 1. Check if the label text is exactly correct (case-sensitive) 2. Increase the wait timeout 3. Ensure the page has fully loaded</p> <pre><code># Increase timeout\nwait = WebDriverWait(driver, 20)\n\n# Wait for page to load\ntime.sleep(2)  # Sometimes needed for complex Appian pages\n</code></pre>"},{"location":"getting-started/quick-start/#issue-element-not-clickable","title":"Issue: Element Not Clickable","text":"<p>Problem: <code>Element is not clickable at point (x, y)</code></p> <p>Solutions: 1. Scroll the element into view 2. Wait for overlaying elements to disappear 3. Use JavaScript click as fallback</p> <pre><code># Scroll to element\ndriver.execute_script(\"arguments[0].scrollIntoView();\", element)\n</code></pre>"},{"location":"getting-started/quick-start/#issue-stale-element-reference","title":"Issue: Stale Element Reference","text":"<p>Problem: <code>StaleElementReferenceException</code></p> <p>Solution: Always use Robo Appian methods instead of storing element references:</p> <pre><code># Good - finds element fresh each time\nButtonUtils.clickByLabelText(wait, \"Submit\")\n\n# Avoid - storing element references\nelement = driver.find_element(By.ID, \"submit-btn\")\nelement.click()  # May become stale\n</code></pre> <p>Ready to build more sophisticated tests? Continue to the User Guide for detailed component documentation!</p>"},{"location":"user-guide/advanced/","title":"Advanced Usage","text":"<p>This section covers advanced usage patterns and tips for maximizing the capabilities of the Robo Appian library.</p>"},{"location":"user-guide/advanced/#custom-component-actions","title":"Custom Component Actions","text":"<p>Learn how to extend or customize component actions for unique Appian UI elements.</p>"},{"location":"user-guide/advanced/#debugging-automation","title":"Debugging Automation","text":"<p>Best practices for debugging and troubleshooting automation scripts.</p>"},{"location":"user-guide/advanced/#performance-optimization","title":"Performance Optimization","text":"<p>Tips for improving the speed and reliability of your automation workflows.</p>"},{"location":"user-guide/best-practices/","title":"Best Practices","text":"<p>Follow these best practices to ensure robust and maintainable automation with Robo Appian.</p> <ul> <li>Use explicit waits for all UI interactions</li> <li>Modularize your test scripts</li> <li>Handle exceptions gracefully</li> <li>Keep selectors and labels up to date</li> <li>Regularly update dependencies</li> </ul>"},{"location":"user-guide/components/","title":"Core Components","text":"<p>This guide provides detailed documentation for all Robo Appian core components. Each component is designed to handle specific types of UI elements in Appian applications.</p>"},{"location":"user-guide/components/#component-overview","title":"Component Overview","text":"<p>Robo Appian provides specialized utilities for different types of UI components:</p> Component Purpose Primary Use Cases ButtonUtils Button interactions Clicking buttons, form submissions InputUtils Text input handling Entering text, clearing fields DropdownUtils Dropdown operations Selecting options, managing comboboxes DateUtils Date picker handling Setting dates, date validations TableUtils Table operations Data extraction, row counting TabUtils Tab navigation Switching between tabs LabelUtils Label text operations Reading text values LinkUtils Link interactions Clicking links, navigation"},{"location":"user-guide/components/#buttonutils","title":"ButtonUtils","text":"<p>Handles all button-related interactions in Appian applications.</p>"},{"location":"user-guide/components/#key-methods","title":"Key Methods","text":"<pre><code>from robo_appian.components.ButtonUtils import ButtonUtils\n\n# Click button by label text\nButtonUtils.clickByLabelText(wait, \"Submit\")\nButtonUtils.clickByLabelText(wait, \"Save Changes\")\nButtonUtils.clickByLabelText(wait, \"Cancel\")\n</code></pre>"},{"location":"user-guide/components/#usage-examples","title":"Usage Examples","text":"<pre><code>def test_form_submission():\n    \"\"\"Example of button interactions in a form\"\"\"\n    # Fill form fields first...\n\n    # Save as draft\n    ButtonUtils.clickByLabelText(wait, \"Save as Draft\")\n\n    # Verify draft saved, then submit\n    if ComponentUtils.checkComponentExistsByXpath(wait, \"//div[contains(text(), 'Draft saved')]\"):\n        ButtonUtils.clickByLabelText(wait, \"Submit for Approval\")\n\n    # Handle confirmation dialog\n    ButtonUtils.clickByLabelText(wait, \"Confirm\")\n</code></pre>"},{"location":"user-guide/components/#best-practices","title":"Best Practices","text":"<ul> <li>Use exact button text as it appears to users</li> <li>Handle confirmation dialogs separately</li> <li>Wait for page changes before next actions</li> </ul>"},{"location":"user-guide/components/#inpututils","title":"InputUtils","text":"<p>Manages text input fields including single-line inputs, text areas, and search fields.</p>"},{"location":"user-guide/components/#key-methods_1","title":"Key Methods","text":"<pre><code>from robo_appian.components.InputUtils import InputUtils\n\n# Set value by label text\nInputUtils.setValueByLabelText(wait, \"First Name\", \"John\")\n\n# Set value by component ID\nInputUtils.setValueById(wait, \"employee-id\", \"EMP001\")\n</code></pre>"},{"location":"user-guide/components/#usage-examples_1","title":"Usage Examples","text":"<pre><code>def fill_employee_form():\n    \"\"\"Complete employee form example\"\"\"\n    # Personal information\n    InputUtils.setValueByLabelText(wait, \"Employee ID\", \"EMP2024001\")\n    InputUtils.setValueByLabelText(wait, \"First Name\", \"John\")\n    InputUtils.setValueByLabelText(wait, \"Last Name\", \"Doe\")\n    InputUtils.setValueByLabelText(wait, \"Email\", \"john.doe@company.com\")\n\n    # Address information\n    InputUtils.setValueByLabelText(wait, \"Street Address\", \"123 Main St\")\n    InputUtils.setValueByLabelText(wait, \"City\", \"San Francisco\")\n    InputUtils.setValueByLabelText(wait, \"ZIP Code\", \"94102\")\n\n    # Additional notes (text area)\n    InputUtils.setValueByLabelText(wait, \"Comments\", \"New employee in engineering department\")\n</code></pre>"},{"location":"user-guide/components/#advanced-techniques","title":"Advanced Techniques","text":"<pre><code># Clear existing content first\ndef set_value_with_clear(wait, label, value):\n    \"\"\"Clear field before setting new value\"\"\"\n    try:\n        element = ComponentUtils.findComponentUsingXpath(wait, f\"//input[@aria-label='{label}']\")\n        element.clear()\n        InputUtils.setValueByLabelText(wait, label, value)\n    except:\n        # Fallback to regular method\n        InputUtils.setValueByLabelText(wait, label, value)\n\n# Handle autocomplete fields\ndef set_autocomplete_field(wait, label, value):\n    \"\"\"Handle fields with autocomplete/suggestions\"\"\"\n    InputUtils.setValueByLabelText(wait, label, value)\n    # Wait for suggestions to appear and select first one\n    time.sleep(1)\n    ComponentUtils.tab(wait)  # Tab to confirm selection\n</code></pre>"},{"location":"user-guide/components/#dropdownutils","title":"DropdownUtils","text":"<p>Handles dropdown menus, comboboxes, and select lists in Appian applications.</p>"},{"location":"user-guide/components/#key-methods_2","title":"Key Methods","text":"<pre><code>from robo_appian.components.DropdownUtils import DropdownUtils\n\n# Select by exact label and value\nDropdownUtils.selectDropdownValueByLabelText(wait, \"Department\", \"Engineering\")\n\n# Select by partial label match\nDropdownUtils.selectDropdownValueByPartialLabelText(wait, \"Status\", \"Active\")\n</code></pre>"},{"location":"user-guide/components/#usage-examples_2","title":"Usage Examples","text":"<pre><code>def configure_employee_details():\n    \"\"\"Example of dropdown selections\"\"\"\n    # Department selection\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"Department\", \"Engineering\")\n\n    # Employment type\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"Employment Type\", \"Full-time\")\n\n    # Status\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"Status\", \"Active\")\n\n    # Location (using partial match for long labels)\n    DropdownUtils.selectDropdownValueByPartialLabelText(wait, \"Office Location\", \"San Francisco\")\n</code></pre>"},{"location":"user-guide/components/#handling-complex-dropdowns","title":"Handling Complex Dropdowns","text":"<pre><code>def handle_dependent_dropdowns():\n    \"\"\"Handle dropdowns that depend on other selections\"\"\"\n    # Select country first\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"Country\", \"United States\")\n\n    # Wait for state dropdown to populate\n    time.sleep(2)\n\n    # Select state\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"State\", \"California\")\n\n    # Wait for city dropdown to populate\n    time.sleep(2)\n\n    # Select city\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"City\", \"San Francisco\")\n</code></pre>"},{"location":"user-guide/components/#dateutils","title":"DateUtils","text":"<p>Specialized component for handling date picker elements in Appian.</p>"},{"location":"user-guide/components/#key-methods_3","title":"Key Methods","text":"<pre><code>from robo_appian.components.DateUtils import DateUtils\nfrom robo_appian.utils.ComponentUtils import ComponentUtils\n\n# Set specific date\nDateUtils.setValueByLabelText(wait, \"Start Date\", \"01/15/2024\")\n\n# Use utility functions for common dates\nDateUtils.setValueByLabelText(wait, \"Application Date\", ComponentUtils.today())\nDateUtils.setValueByLabelText(wait, \"Previous Date\", ComponentUtils.yesterday())\n</code></pre>"},{"location":"user-guide/components/#usage-examples_3","title":"Usage Examples","text":"<pre><code>def set_project_dates():\n    \"\"\"Example of date field management\"\"\"\n    # Project start date (today)\n    DateUtils.setValueByLabelText(wait, \"Project Start Date\", ComponentUtils.today())\n\n    # Project end date (specific date)\n    DateUtils.setValueByLabelText(wait, \"Project End Date\", \"12/31/2024\")\n\n    # Milestone dates\n    DateUtils.setValueByLabelText(wait, \"Phase 1 Completion\", \"03/15/2024\")\n    DateUtils.setValueByLabelText(wait, \"Phase 2 Completion\", \"06/15/2024\")\n    DateUtils.setValueByLabelText(wait, \"Final Delivery\", \"09/15/2024\")\n</code></pre>"},{"location":"user-guide/components/#date-format-handling","title":"Date Format Handling","text":"<pre><code>from datetime import datetime, timedelta\n\ndef calculate_and_set_dates():\n    \"\"\"Calculate dates based on business logic\"\"\"\n    # Start date is today\n    start_date = datetime.now()\n    DateUtils.setValueByLabelText(wait, \"Start Date\", start_date.strftime(\"%m/%d/%Y\"))\n\n    # End date is 30 days from start\n    end_date = start_date + timedelta(days=30)\n    DateUtils.setValueByLabelText(wait, \"End Date\", end_date.strftime(\"%m/%d/%Y\"))\n\n    # Review date is 7 days before end\n    review_date = end_date - timedelta(days=7)\n    DateUtils.setValueByLabelText(wait, \"Review Date\", review_date.strftime(\"%m/%d/%Y\"))\n</code></pre>"},{"location":"user-guide/components/#tableutils","title":"TableUtils","text":"<p>Provides comprehensive functionality for working with data tables and grids.</p>"},{"location":"user-guide/components/#key-methods_4","title":"Key Methods","text":"<pre><code>from robo_appian.components.TableUtils import TableUtils\n\n# Find table by column name\ntable = TableUtils.findTableByColumnName(wait, \"Employee ID\")\n\n# Get row count\nrow_count = TableUtils.rowCount(table)\n\n# Get data from specific cell\ncell_data = TableUtils.findComponentFromTableCell(wait, 1, \"Name\").text\n</code></pre>"},{"location":"user-guide/components/#usage-examples_4","title":"Usage Examples","text":"<pre><code>def extract_employee_data():\n    \"\"\"Extract all employee data from table\"\"\"\n    # Find the employee table\n    table = TableUtils.findTableByColumnName(wait, \"Employee ID\")\n    total_rows = TableUtils.rowCount(table)\n\n    employees = []\n\n    # Extract data from each row\n    for row in range(1, total_rows + 1):\n        try:\n            employee = {\n                'id': TableUtils.findComponentFromTableCell(wait, row, \"Employee ID\").text,\n                'name': TableUtils.findComponentFromTableCell(wait, row, \"Name\").text,\n                'department': TableUtils.findComponentFromTableCell(wait, row, \"Department\").text,\n                'status': TableUtils.findComponentFromTableCell(wait, row, \"Status\").text,\n                'start_date': TableUtils.findComponentFromTableCell(wait, row, \"Start Date\").text\n            }\n            employees.append(employee)\n\n        except Exception as e:\n            print(f\"Error processing row {row}: {e}\")\n            continue\n\n    return employees\n\ndef validate_employee_in_table(expected_employee):\n    \"\"\"Validate specific employee appears in table\"\"\"\n    table = TableUtils.findTableByColumnName(wait, \"Employee ID\")\n    total_rows = TableUtils.rowCount(table)\n\n    for row in range(1, total_rows + 1):\n        emp_id = TableUtils.findComponentFromTableCell(wait, row, \"Employee ID\").text\n        if emp_id == expected_employee['id']:\n            # Found the employee, validate details\n            name = TableUtils.findComponentFromTableCell(wait, row, \"Name\").text\n            department = TableUtils.findComponentFromTableCell(wait, row, \"Department\").text\n\n            assert name == expected_employee['name'], f\"Name mismatch: {name} != {expected_employee['name']}\"\n            assert department == expected_employee['department'], f\"Department mismatch: {department} != {expected_employee['department']}\"\n\n            return True\n\n    raise AssertionError(f\"Employee {expected_employee['id']} not found in table\")\n</code></pre>"},{"location":"user-guide/components/#table-interactions","title":"Table Interactions","text":"<pre><code>def interact_with_table_rows():\n    \"\"\"Example of interacting with table elements\"\"\"\n    table = TableUtils.findTableByColumnName(wait, \"Employee ID\")\n    total_rows = TableUtils.rowCount(table)\n\n    for row in range(1, total_rows + 1):\n        status = TableUtils.findComponentFromTableCell(wait, row, \"Status\").text\n\n        if status == \"Pending\":\n            # Click action button for pending employees\n            action_cell = TableUtils.findComponentFromTableCell(wait, row, \"Actions\")\n            edit_button = action_cell.find_element(By.XPATH, \".//button[contains(text(), 'Edit')]\")\n            edit_button.click()\n\n            # Perform some action, then continue\n            break\n</code></pre>"},{"location":"user-guide/components/#tabutils","title":"TabUtils","text":"<p>Handles tab navigation within Appian interfaces.</p>"},{"location":"user-guide/components/#key-methods_5","title":"Key Methods","text":"<pre><code>from robo_appian.components.TabUtils import TabUtils\n\n# Click on tab by label\nTabUtils.clickTabByLabelText(wait, \"General Information\")\nTabUtils.clickTabByLabelText(wait, \"Contact Details\")\nTabUtils.clickTabByLabelText(wait, \"Employment History\")\n</code></pre>"},{"location":"user-guide/components/#usage-examples_5","title":"Usage Examples","text":"<pre><code>def complete_multi_tab_form():\n    \"\"\"Fill out form across multiple tabs\"\"\"\n\n    # Tab 1: Personal Information\n    TabUtils.clickTabByLabelText(wait, \"Personal Information\")\n    InputUtils.setValueByLabelText(wait, \"First Name\", \"John\")\n    InputUtils.setValueByLabelText(wait, \"Last Name\", \"Doe\")\n    DateUtils.setValueByLabelText(wait, \"Birth Date\", \"01/15/1990\")\n\n    # Tab 2: Contact Information\n    TabUtils.clickTabByLabelText(wait, \"Contact Information\")\n    InputUtils.setValueByLabelText(wait, \"Email\", \"john.doe@company.com\")\n    InputUtils.setValueByLabelText(wait, \"Phone\", \"555-123-4567\")\n    InputUtils.setValueByLabelText(wait, \"Address\", \"123 Main St\")\n\n    # Tab 3: Employment Details\n    TabUtils.clickTabByLabelText(wait, \"Employment Details\")\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"Department\", \"Engineering\")\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"Position\", \"Software Developer\")\n    DateUtils.setValueByLabelText(wait, \"Start Date\", ComponentUtils.today())\n\n    # Tab 4: Review and Submit\n    TabUtils.clickTabByLabelText(wait, \"Review and Submit\")\n    ButtonUtils.clickByLabelText(wait, \"Submit Application\")\n</code></pre>"},{"location":"user-guide/components/#componentdriver","title":"ComponentDriver","text":"<p>The <code>ComponentDriver</code> provides a unified interface for interacting with all component types.</p>"},{"location":"user-guide/components/#usage","title":"Usage","text":"<pre><code>from robo_appian.controllers.ComponentDriver import ComponentDriver\n\n# Universal component interaction\nComponentDriver.execute(wait, \"Input Text\", \"Set Value\", \"First Name\", \"John\")\nComponentDriver.execute(wait, \"Dropdown\", \"Select\", \"Department\", \"Engineering\")\nComponentDriver.execute(wait, \"Date\", \"Set Value\", \"Start Date\", \"01/15/2024\")\nComponentDriver.execute(wait, \"Button\", \"Click\", \"Submit\", None)\n</code></pre>"},{"location":"user-guide/components/#data-driven-testing","title":"Data-Driven Testing","text":"<pre><code>def test_form_with_data_driver():\n    \"\"\"Use ComponentDriver for data-driven testing\"\"\"\n\n    # Define test data\n    form_data = [\n        (\"Input Text\", \"Set Value\", \"Employee ID\", \"EMP001\"),\n        (\"Input Text\", \"Set Value\", \"First Name\", \"John\"),\n        (\"Input Text\", \"Set Value\", \"Last Name\", \"Doe\"),\n        (\"Input Text\", \"Set Value\", \"Email\", \"john.doe@company.com\"),\n        (\"Date\", \"Set Value\", \"Start Date\", ComponentUtils.today()),\n        (\"Dropdown\", \"Select\", \"Department\", \"Engineering\"),\n        (\"Dropdown\", \"Select\", \"Status\", \"Active\"),\n        (\"Button\", \"Click\", \"Save Employee\", None)\n    ]\n\n    # Execute each action\n    for component_type, action, label, value in form_data:\n        try:\n            ComponentDriver.execute(wait, component_type, action, label, value)\n            print(f\"\u2705 {action} on {label}: {value}\")\n        except Exception as e:\n            print(f\"\u274c Failed {action} on {label}: {e}\")\n            break\n</code></pre>"},{"location":"user-guide/components/#component-integration-patterns","title":"Component Integration Patterns","text":""},{"location":"user-guide/components/#chain-operations","title":"Chain Operations","text":"<pre><code>def chain_component_operations():\n    \"\"\"Chain multiple component operations together\"\"\"\n    try:\n        # Step 1: Fill basic information\n        InputUtils.setValueByLabelText(wait, \"Name\", \"John Doe\")\n        InputUtils.setValueByLabelText(wait, \"Email\", \"john@company.com\")\n\n        # Step 2: Select options\n        DropdownUtils.selectDropdownValueByLabelText(wait, \"Department\", \"Engineering\")\n        DropdownUtils.selectDropdownValueByLabelText(wait, \"Role\", \"Developer\")\n\n        # Step 3: Set dates\n        DateUtils.setValueByLabelText(wait, \"Start Date\", ComponentUtils.today())\n\n        # Step 4: Navigate and submit\n        TabUtils.clickTabByLabelText(wait, \"Review\")\n        ButtonUtils.clickByLabelText(wait, \"Submit\")\n\n        return True\n\n    except Exception as e:\n        print(f\"Chain operation failed: {e}\")\n        return False\n</code></pre>"},{"location":"user-guide/components/#conditional-logic","title":"Conditional Logic","text":"<pre><code>def conditional_form_filling():\n    \"\"\"Fill form based on conditions\"\"\"\n\n    # Check if optional section is present\n    if ComponentUtils.checkComponentExistsByXpath(wait, \"//div[@id='optional-section']\"):\n        TabUtils.clickTabByLabelText(wait, \"Additional Information\")\n        InputUtils.setValueByLabelText(wait, \"Additional Notes\", \"Optional information provided\")\n\n    # Check employment type and fill accordingly\n    employment_type = \"Full-time\"  # This could come from test data\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"Employment Type\", employment_type)\n\n    if employment_type == \"Full-time\":\n        DateUtils.setValueByLabelText(wait, \"Start Date\", ComponentUtils.today())\n        DropdownUtils.selectDropdownValueByLabelText(wait, \"Benefits Package\", \"Standard\")\n    elif employment_type == \"Contract\":\n        DateUtils.setValueByLabelText(wait, \"Contract Start\", ComponentUtils.today())\n        DateUtils.setValueByLabelText(wait, \"Contract End\", \"12/31/2024\")\n</code></pre> <p>This comprehensive guide covers all core components and their usage patterns. Use these examples as building blocks for your Appian test automation!</p>"},{"location":"user-guide/error-handling/","title":"Error Handling","text":"<p>Robo Appian provides structured error handling for common automation issues.</p>"},{"location":"user-guide/error-handling/#common-errors","title":"Common Errors","text":"<ul> <li>Element not found</li> <li>Timeout waiting for component</li> <li>Invalid input value</li> </ul>"},{"location":"user-guide/error-handling/#handling-exceptions","title":"Handling Exceptions","text":"<p>Use try/except blocks and custom exception classes from <code>robo_appian.exceptions</code> to manage errors gracefully.</p>"},{"location":"user-guide/overview/","title":"User Guide Overview","text":"<p>Welcome to the Robo Appian User Guide! This comprehensive guide will help you master automated testing of Appian applications using the Robo Appian library.</p>"},{"location":"user-guide/overview/#what-youll-learn","title":"What You'll Learn","text":"<p>This user guide covers everything you need to know to become proficient with Robo Appian:</p>"},{"location":"user-guide/overview/#core-concepts","title":"\ud83c\udfd7\ufe0f Core Concepts","text":"<p>Understand the fundamental concepts and architecture of Robo Appian, including how it simplifies Appian UI automation.</p>"},{"location":"user-guide/overview/#component-mastery","title":"\ud83c\udfaf Component Mastery","text":"<p>Learn to use each component utility effectively, from simple buttons to complex data tables.</p>"},{"location":"user-guide/overview/#advanced-techniques","title":"\ud83d\ude80 Advanced Techniques","text":"<p>Discover powerful features like the ComponentDriver, data-driven testing, and complex workflow automation.</p>"},{"location":"user-guide/overview/#best-practices","title":"\ud83d\udccb Best Practices","text":"<p>Follow industry-proven patterns and practices for maintainable, reliable test automation.</p>"},{"location":"user-guide/overview/#troubleshooting","title":"\ud83d\udee0\ufe0f Troubleshooting","text":"<p>Master error handling, debugging techniques, and common issue resolution.</p>"},{"location":"user-guide/overview/#guide-structure","title":"Guide Structure","text":"<ul> <li> <p>:material-cog:{ .lg .middle } Core Components</p> <p>Detailed guide to all Robo Appian components and their usage</p> <p>:octicons-arrow-right-24: Core Components</p> </li> <li> <p>:material-rocket:{ .lg .middle } Advanced Features</p> <p>ComponentDriver, data-driven testing, and complex workflows</p> <p>:octicons-arrow-right-24: Advanced Features</p> </li> <li> <p>:material-shield-check:{ .lg .middle } Best Practices</p> <p>Industry best practices for test automation</p> <p>:octicons-arrow-right-24: Best Practices</p> </li> <li> <p>:material-bug:{ .lg .middle } Error Handling</p> <p>Master debugging and error resolution techniques</p> <p>:octicons-arrow-right-24: Error Handling</p> </li> </ul>"},{"location":"user-guide/overview/#getting-the-most-from-this-guide","title":"Getting the Most from This Guide","text":""},{"location":"user-guide/overview/#prerequisites","title":"Prerequisites","text":"<p>Before diving into this guide, make sure you have:</p> <ul> <li>[x] Robo Appian installed - See Installation Guide</li> <li>[x] Basic Python knowledge - Understanding of functions, classes, and imports</li> <li>[x] Selenium familiarity - Basic understanding of WebDriver concepts</li> <li>[x] Access to Appian - An Appian application to test against</li> </ul>"},{"location":"user-guide/overview/#reading-approach","title":"Reading Approach","text":"<p>This guide is designed to be read in order, but you can also jump to specific sections:</p> Linear ReadingReference Style <p>Recommended for beginners</p> <ol> <li>Start with Core Components</li> <li>Progress through Advanced Features </li> <li>Study Best Practices</li> <li>Reference Error Handling as needed</li> </ol> <p>Good for experienced users</p> <ul> <li>Use the search function to find specific topics</li> <li>Jump directly to component-specific sections</li> <li>Reference best practices for specific scenarios</li> <li>Consult error handling for troubleshooting</li> </ul>"},{"location":"user-guide/overview/#learning-tips","title":"Learning Tips","text":"<p>Hands-on Practice</p> <p>The best way to learn Robo Appian is by practicing. Try the examples in your own Appian environment.</p> <p>Code Examples</p> <p>All code examples are tested and ready to use. Copy and adapt them for your specific needs.</p> <p>Version Compatibility</p> <p>This guide is for Robo Appian v0.0.12+. Some features may not be available in older versions.</p>"},{"location":"user-guide/overview/#core-philosophy","title":"Core Philosophy","text":"<p>Understanding Robo Appian's design philosophy will help you use it more effectively:</p>"},{"location":"user-guide/overview/#1-label-based-interaction","title":"1. Label-Based Interaction","text":"<p>Traditional Selenium: <pre><code>element = driver.find_element(By.XPATH, \"//div[@class='appian-component']//input[@data-field='username']\")\nelement.send_keys(\"testuser\")\n</code></pre></p> <p>Robo Appian approach: <pre><code>InputUtils.setValueByLabelText(wait, \"Username\", \"testuser\")\n</code></pre></p> <p>Benefits: - More readable and maintainable - Resilient to UI changes - Business-user friendly</p>"},{"location":"user-guide/overview/#2-component-specific-methods","title":"2. Component-Specific Methods","text":"<p>Each UI component type has dedicated utilities:</p> Component Type Utility Class Purpose Text Inputs <code>InputUtils</code> Handle text fields, text areas Buttons <code>ButtonUtils</code> Button interactions Dropdowns <code>DropdownUtils</code> Dropdown selections Date Pickers <code>DateUtils</code> Date input handling Tables <code>TableUtils</code> Data table operations Tabs <code>TabUtils</code> Tab navigation"},{"location":"user-guide/overview/#3-progressive-complexity","title":"3. Progressive Complexity","text":"<p>Start simple and add complexity as needed:</p> <pre><code># Simple: Direct component interaction\nButtonUtils.clickByLabelText(wait, \"Submit\")\n\n# Advanced: Data-driven with ComponentDriver\nComponentDriver.execute(wait, \"Button\", \"Click\", \"Submit\", None)\n\n# Complex: Custom validation and error handling\ntry:\n    ButtonUtils.clickByLabelText(wait, \"Submit\")\n    if ComponentUtils.checkComponentExistsByXpath(wait, \"//div[@class='success']\"):\n        logger.info(\"Submission successful\")\nexcept Exception as e:\n    logger.error(f\"Submission failed: {e}\")\n    take_screenshot(\"submission_error\")\n</code></pre>"},{"location":"user-guide/overview/#common-use-cases","title":"Common Use Cases","text":""},{"location":"user-guide/overview/#1-form-automation","title":"1. Form Automation","text":"<p>Filling out Appian forms with various field types:</p> <pre><code>def fill_employee_form(employee_data):\n    \"\"\"Fill out employee form with provided data\"\"\"\n    InputUtils.setValueByLabelText(wait, \"First Name\", employee_data[\"first_name\"])\n    InputUtils.setValueByLabelText(wait, \"Last Name\", employee_data[\"last_name\"])\n    DateUtils.setValueByLabelText(wait, \"Birth Date\", employee_data[\"birth_date\"])\n    DropdownUtils.selectDropdownValueByLabelText(wait, \"Department\", employee_data[\"department\"])\n    ButtonUtils.clickByLabelText(wait, \"Save Employee\")\n</code></pre>"},{"location":"user-guide/overview/#2-data-validation","title":"2. Data Validation","text":"<p>Verifying data in tables and forms:</p> <pre><code>def validate_employee_data(expected_employee):\n    \"\"\"Validate employee appears in the table correctly\"\"\"\n    table = TableUtils.findTableByColumnName(wait, \"Employee ID\")\n    row_count = TableUtils.rowCount(table)\n\n    for row in range(1, row_count + 1):\n        emp_id = TableUtils.findComponentFromTableCell(wait, row, \"Employee ID\").text\n        if emp_id == expected_employee[\"id\"]:\n            name = TableUtils.findComponentFromTableCell(wait, row, \"Name\").text\n            assert name == expected_employee[\"name\"]\n            return True\n\n    raise AssertionError(f\"Employee {expected_employee['id']} not found\")\n</code></pre>"},{"location":"user-guide/overview/#3-workflow-testing","title":"3. Workflow Testing","text":"<p>Testing complete business processes:</p> <pre><code>def test_employee_onboarding_workflow():\n    \"\"\"Test complete employee onboarding process\"\"\"\n    # Login\n    login_as_hr_manager()\n\n    # Create employee\n    create_new_employee(test_employee_data)\n\n    # Assign to department\n    assign_employee_to_department(test_employee_data[\"id\"], \"Engineering\")\n\n    # Set up benefits\n    configure_employee_benefits(test_employee_data[\"id\"])\n\n    # Verify completion\n    verify_employee_onboarding_complete(test_employee_data[\"id\"])\n</code></pre>"},{"location":"user-guide/overview/#integration-patterns","title":"Integration Patterns","text":""},{"location":"user-guide/overview/#with-testing-frameworks","title":"With Testing Frameworks","text":"<p>Robo Appian integrates seamlessly with popular testing frameworks:</p> pytestunittest <pre><code>import pytest\nfrom selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\n\n@pytest.fixture(scope=\"session\")\ndef driver():\n    driver = webdriver.Chrome()\n    yield driver\n    driver.quit()\n\n@pytest.fixture\ndef wait(driver):\n    return WebDriverWait(driver, 10)\n\ndef test_login(driver, wait):\n    driver.get(\"https://your-appian-app.com\")\n    InputUtils.setValueByLabelText(wait, \"Username\", \"testuser\")\n    ButtonUtils.clickByLabelText(wait, \"Sign In\")\n</code></pre> <pre><code>import unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\n\nclass TestAppianUI(unittest.TestCase):\n    def setUp(self):\n        self.driver = webdriver.Chrome()\n        self.wait = WebDriverWait(self.driver, 10)\n\n    def tearDown(self):\n        self.driver.quit()\n\n    def test_form_submission(self):\n        self.driver.get(\"https://your-appian-app.com\")\n        InputUtils.setValueByLabelText(self.wait, \"Name\", \"Test\")\n        ButtonUtils.clickByLabelText(self.wait, \"Submit\")\n</code></pre>"},{"location":"user-guide/overview/#with-cicd-pipelines","title":"With CI/CD Pipelines","text":"<p>Example GitHub Actions integration:</p> <pre><code>name: Appian UI Tests\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.12'\n      - name: Install dependencies\n        run: |\n          pip install robo_appian pytest\n      - name: Run tests\n        run: pytest tests/\n</code></pre>"},{"location":"user-guide/overview/#next-steps","title":"Next Steps","text":"<p>Ready to dive deeper? Choose your path:</p> <ul> <li> <p>:material-play:{ .lg .middle } Start with Components</p> <p>Learn each component utility in detail</p> <p>:octicons-arrow-right-24: Core Components</p> </li> <li> <p>:material-rocket:{ .lg .middle } Explore Advanced Features</p> <p>Discover powerful automation patterns</p> <p>:octicons-arrow-right-24: Advanced Features</p> </li> <li> <p>:material-school:{ .lg .middle } See Real Examples</p> <p>Study complete test examples</p> <p>:octicons-arrow-right-24: Examples</p> </li> <li> <p>:material-help:{ .lg .middle } Get Help</p> <p>Find answers to common questions</p> <p>:octicons-arrow-right-24: Error Handling</p> </li> </ul> <p>Happy testing with Robo Appian! \ud83d\ude80</p>"}]}